{"componentChunkName":"component---src-templates-blog-post-js","path":"/you-may-dont-need-drevied-state/","result":{"data":{"site":{"siteMetadata":{"title":"Edward Elric's Blog"}},"markdownRemark":{"id":"94c62cd0-3a10-5bd5-988c-4404961699bc","excerpt":"React 16.4 包含了一个  getDerivedStateFromProps 的 bugfix，这个 bug 导致一些 React 组件潜在的 bug…","html":"<p>React 16.4 包含了一个  <a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/05/23/react-v-16-4.html%23bugfix-for-getderivedstatefromprops\">getDerivedStateFromProps 的 bugfix</a>，这个 bug 导致一些 React 组件潜在的 bug 稳定复现。这个版本暴露了个案例，当你的应用正在使用反模式构建，则将会在此次修复后可能无法工作，我们对这个改动感到抱歉。在本文中，我们将阐述一些通常的使用 Derived State 的反模式以及相应的解决替代方案。</p>\n<p>在很长一段时间，在 props 改变时响应 state 的更新，无需额外的渲染，唯一的途径就是  <code class=\"language-text\">componentWillReceiveProps</code>  这个生命周期方法。在 16.3 版本下，<a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/03/29/react-v-16-3.html%23component-lifecycle-changes\">我们介绍了一个替代的生命周期 getDerivedStateFromProps</a>  更加安全的方式来解决相同的用例。同时，我们意识到人们有很多关于使用这两个方法的错误解读，我们发现了这些反模式导致一些微妙且令人困惑的 bug。 <code class=\"language-text\">getDerivedStateFromProps</code>  在 16.4 中做了修复，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/facebook/react/issues/12898\">使得 derived state 更加可预测</a>，因此滥用的后果更加容易被留意到。\nNote \n所有关于旧的  > <code class=\"language-text\">componentWillReceiveProps</code>  和新  > <code class=\"language-text\">getDerivedStateFromProps</code>  的反模式都会在本文中阐述。\n这篇文章涵盖以下话题：</p>\n<ul>\n<li>什么时候使用 derived state</li>\n<li>\n<p>使用 derived state 时通常的 bug</p>\n<ul>\n<li>反模式：无条件地将 prop 复制给 state</li>\n<li>反模式：当 props 改变时清除 state</li>\n</ul>\n</li>\n<li>推荐的方案</li>\n<li>什么是 memoization ？</li>\n</ul>\n<hr>\n<h1>什么时候使用 Derived State</h1>\n<p><code class=\"language-text\">getDerivedStateFromProps</code>  存在只为了一个目的。它让组件在  <strong>props 发生改变</strong>时更新它自身的内部 state。我们之前的文章提供一些例子，例如：<a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/03/27/update-on-async-rendering.html%23updating-state-based-on-props\">基于 offset prop 的改变记录当前滚动位置</a>或者  <a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/03/27/update-on-async-rendering.html%23fetching-external-data-when-props-change\">通过源 prop 加载外部数据</a>。</p>\n<p>我们没有提供更多的例子，因为这有一个常规的准则，<strong>应该保守地使用 derived state</strong>。所有我们看到关于 derived state 的问题从根本上可以归结成两类：(1) 无条件的以 props 更新 state 或者 (2) 每当 props 和 state 不同时就更新 state。(我们将在下面谈到更多细节。)</p>\n<ul>\n<li>当你使用 derived state 来暂存一些仅基于当前 props 的计算结果时，你不需要 derived state。查看  <a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html%23what-about-memoization\">什么是 memoization ?</a></li>\n<li>当你无条件更新 derived state 抑或是每当 props 与 state 不同时更新 state，你的组件可能会频繁重置它的 state。</li>\n</ul>\n<hr>\n<h1>使用 Derived State 时的常见 bug</h1>\n<p>“受控的” 和 “不受控的” 这两个术语经常涉及到 form 的 input，然而他们也能描述组件数据存在的位置。当数据作为 props 传递时，则数据可以被认为是<strong>受控的</strong>(因为父组件<em>控制</em>了这些数据)。仅存在于内部 state 的数据可以被认为是<strong>不受控</strong>的(因为父组件不能直接改变它)。</p>\n<p>derived state 的最常见错误就是混合了“受控”和“不受控”两种情况；当一个 derived state 值也使用  <code class=\"language-text\">setState</code>  来更新时，那它数据来源就不是唯一的。上文提到的“<a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/03/27/update-on-async-rendering.html%23fetching-external-data-when-props-change\">外部数据加载的例子</a>”看上去好像就是这样，但其实有本质上差别。在数据加载例子中，‘source’ prop 和 ‘loading’ state 都有明确的数据来源。当 ‘source’ prop <strong>改变</strong>时， ‘loading’ state <strong>总会</strong>被覆盖。相反地，state 当且仅当 prop 改变时才会被覆盖，否则只能被 state 所在的组件所管理。</p>\n<p>当这些约束被改变时问题就浮现了。这会产生两个经典形式。让我们看一看他们。</p>\n<h2>反模式：无条件地将 prop 复制给 state</h2>\n<p>一个常见关于  <code class=\"language-text\">getDerivedStateFromProps</code>  和  <code class=\"language-text\">componentWillReceiveProps</code>  的错误理解就是他们只会在 props “变化”时调用。无论是组件重新渲染还是 props 和之前“不同”，这些生命周期方法都会被调用。基于此，这两个生命周期方法总是被用于不安全地无条件地覆盖 state。<strong>这样做将导致 state 的更新发生丢失。</strong></p>\n<p>让我们思考一个例子来说明这个问题。这里有一个  <code class=\"language-text\">EmailInput</code>  组件“映射”了一个 email 属性在 state 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>email <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This will erase any local state updates!</span>\n    <span class=\"token comment\">// Do not do this.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> nextProps<span class=\"token punctuation\">.</span>email <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先，这个组件看上去没什么问题。State 被 props 传递进来的值所初始化，并在我们键入  <code class=\"language-text\">&lt;input&gt;</code>  的时候被更新。但是如果我们的父组件重新渲染的时候，我们输入到  <code class=\"language-text\">input</code>  的内容就会丢失(<a href=\"https://link.zhihu.com/?target=https%3A//codesandbox.io/s/m3w9zn1z8x\">看这个例子</a>)！即使我们在重置前进行比较  <code class=\"language-text\">nextProps.email !== this.state.email</code>也会这样。</p>\n<p>在这个简单的例子中，只有当 email 属性被改变时加入  <code class=\"language-text\">shouldComponentUpdate</code>  来解决重渲染。然而在实践中，组件总是接受多个 props；另一个 prop 改变时依然会导致重渲染和不当重置。在函数和对象属性在内部被创建，在一个实质性的变化发生时，实现  <code class=\"language-text\">shouldComponentUpdate</code>  可靠地只返回 true 值变得困难。<a href=\"https://link.zhihu.com/?target=https%3A//codesandbox.io/s/jl0w6r9w59\">这里有个 demo 展示发生的情况</a>。因此， <code class=\"language-text\">shouldComponentUpdate</code>  作为性能优化的最好方式被使用，而不用在 derived state 中保证正确性。</p>\n<p>至此，为何<strong>无条件地将 props 复制给 state 是一个坏想法</strong>显而易见。在 review 可能的解决方案，让我们来看看一个有关的问题模式：在 email 属性改变时，如果我们只更新 state ？</p>\n<h2>反模式：当 props 改变时清除 state</h2>\n<p>继续上述的例子，当  <code class=\"language-text\">props.email</code>  改变时，我们可以通过只更新来避免意外地清除 state：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillReceiveProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Any time props.email changes, update state.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">.</span>email <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        email<span class=\"token operator\">:</span> nextProps<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note\n不仅在以上例子中  > <code class=\"language-text\">componentWillReceiveProps</code> ,一个的反模式也被用于  > <code class=\"language-text\">getDerivedStateFromProps</code>  中。\n我们做了很大的改进。现在我们的组件在 props 实质变化时才会清楚我们输入的内容。</p>\n<p>但依旧存在一个微妙的问题。想象一下一个密码管理应用使用上述输入组件。当在两个相同 email 的账户下切换时，输入组件重置会失败。这是因为两个账户传递给组件的 prop 值是相同的！这使得用户感到诧异，一个账户没有保存的变更会影响另一个共享同一 email 的账号上。(<a href=\"https://link.zhihu.com/?target=https%3A//codesandbox.io/s/mz2lnkjkrx\">这里看 demo</a>)</p>\n<p>这种设计是有本质缺陷的，但它是最容易犯的。(<a href=\"https://link.zhihu.com/?target=https%3A//twitter.com/brian_d_vaughn/status/959600888242307072\">我就犯过！</a>)幸运的是，以下有两个更好的替代方案。而关键就是对每一片数据，你需要选一个控制数据并以其作为真实源的简单组件，并避免副本数据存在于其他组件。让我们来看一下这些替代方案。</p>\n<hr>\n<h1>优选方案</h1>\n<h2>推荐：完全受控组件</h2>\n<p>一个避免上述涉及问题的途径就是完全地移除我们组件中的 state。如果 email 地址只存在于 prop，那我们没必要担心 state 的冲突。我们甚至可以把  <code class=\"language-text\">EmailInput</code>  缓存一个更加轻量的函数式的组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">EmailInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onChange<span class=\"token punctuation\">}</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个途径简化了我们组件的实现，但是我们如果想存储草稿的时候，父组件还是需要手工完成这件事。(<a href=\"https://link.zhihu.com/?target=https%3A//codesandbox.io/s/7154w1l551\">点这看这种模式的例子</a>)</p>\n<h2>推荐：带有 key 的完全不受控组件</h2>\n<p>另一个替代方案就是我们的组件完全的控制自己的 email state “草稿”。在此例子中，我们的组件依然可以接收一个来自于<em>初始值</em>，但它将会忽略后面 prop 的改动：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>defaultEmail <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了能在不同的情境下重置值(如密码管理方案)，我们使用特殊的 React 属性  <code class=\"language-text\">key</code> 。当  <code class=\"language-text\">key</code>  改变时，React <a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/docs/reconciliation.html%23keys\">将创建一个新的组件实例而不是更新现有的这个</a>。Keys 经常被用于动态 list，但在这里依然管用。在我们的案例中，我们能根据 user ID 在新用户被选中时重新创建 email 输入组件：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>EmailInput defaultEmail<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>每当 ID 改变时， <code class=\"language-text\">EmailInput</code>  将会被重新创建，它的 state 将会用最新的  <code class=\"language-text\">defaultEmail</code>  值重置。(<a href=\"https://link.zhihu.com/?target=https%3A//codesandbox.io/s/6v1znlxyxn\">点这里看这种模式的例子</a>)使用这种途径，你不需要为每一个输入组件加  <code class=\"language-text\">key</code> 。也许在 from 中加一个  <code class=\"language-text\">key</code>  会来得更好。每当 key 改变时，所有在 from 里的组件都会用一个新的 initialized state 来重新创建。</p>\n<p>更多的案例中，这是一个处理需要被重置的 state 的最佳方式。\nNote\n虽然这貌似会很慢，在性能差异无关紧要的时候。当组件有很重的更新逻辑时候，使用一个 key ，忽略子树 diffing 甚至会更快。</p>\n<h2>替代方案 1：使用 ID prop 重置不受控组件</h2>\n<p>如果  <code class=\"language-text\">key</code>  由于某些原因不能被使用(也许组件有昂贵的初始化代价)，一个可行但笨重的方案就是在  <code class=\"language-text\">getDerivedStateFromProps</code>  中监听 “userID” 的改变：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>defaultEmail<span class=\"token punctuation\">,</span>\n    prevPropsUserID<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>userID<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Any time the current user changes,</span>\n    <span class=\"token comment\">// Reset any parts of state that are tied to that user.</span>\n    <span class=\"token comment\">// In this simple example, that's just the email.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>userID <span class=\"token operator\">!==</span> state<span class=\"token punctuation\">.</span>prevPropsUserID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        prevPropsUserID<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>userID<span class=\"token punctuation\">,</span>\n        email<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>defaultEmail<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这也提供了灵活性——重置部分被我们选中的组件内部 state。(<a href=\"https://link.zhihu.com/?target=https%3A//codesandbox.io/s/rjyvp7l3rq\">点这里看此模式的 demo</a>)\nNote\n及时以上例子展示了  > <code class=\"language-text\">getDerivedStateFromProps</code> ，同样的技术手段也可以被用在  > <code class=\"language-text\">componentWillReceiveProps</code> 。</p>\n<h2>替代方式 2：在一个实例方法中重置不受控组件</h2>\n<p>更罕见地，你可能需要重置 state 即使没有适当的 ID 可用为  <code class=\"language-text\">key</code> 。一个解决方案就是每次你想重置时用一个随机数或者自增数字重置 key。另一个可行的方案是暴露一个实例方法命令式的重置内部 state：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>defaultEmail<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">resetEmailForNewUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newEmail</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> newEmail <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>父组件能<a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/docs/glossary.html%23refs\">用 ref 来调用这个方法</a>。(<a href=\"https://link.zhihu.com/?target=https%3A//codesandbox.io/s/l70krvpykl\">点击这看这个模式例子</a>)</p>\n<p>Refs 在这个确定的例子中是有用的，但通常上我们建议你保守使用。甚至在这个 demo 中，这个必要的方法是不理想的，因为本来一次的渲染会变成两次。</p>\n<hr>\n<h1>扼要重述</h1>\n<p>重述一下，当设计一个组件的时候，决定数据是否受控或不受控是至关重要的。</p>\n<p>让组件变得<strong>受控</strong>，而不是试图在** state 中复制一个 prop **，在一些父组件的 state 中联合两个分散的值。举个例子，与其子组件接收一个“已提交的” <code class=\"language-text\">props.value</code>  并跟踪一个“草稿” <code class=\"language-text\">state.value</code> ，不如在父组件中管理  <code class=\"language-text\">state.draftValue</code>  和  <code class=\"language-text\">state.committedValue</code> ，并控制直接控制子组件的值。这让数据流更加明确和可预测。</p>\n<p>对<strong>不受控</strong>组件，如果你在一个特殊的 prop (通常是 ID)改变时试图重置 state，你有一些选择：</p>\n<ul>\n<li><strong>推荐：重置所有内部 state，使用 key 属性</strong></li>\n<li>替代方案 1：<em>仅重置确定的 state 字段</em>，监听特定属性的变化(例如： <code class=\"language-text\">props.userID</code>)。</li>\n<li>替代方案 2：你也可以考虑使用 refs 调用一个命令式实例方法。</li>\n</ul>\n<hr>\n<h1>什么是 memoization ?</h1>\n<p>我们也看到，仅当输入变化的时候，derived state 被用于确保关键值被用于  <code class=\"language-text\">render</code>  中会重新计算。这个技巧被称之为  <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Memoization\">memoization</a>。</p>\n<p>使用 derived state 来完成 memoization 并不一定是坏事，但这经常不是最佳方案。管理 derived state 具有内在复杂度，这个复杂度随着属性的增加而提升。例如，如果我们想要加入第二个 derived feild 到我们的组件 state，那么我们的实现将需要分别跟踪两者的变化。</p>\n<p>让我们来看一个例子——组件携带一个属性(一个 item list)，并渲染匹配用户输入的搜索查询的 item。我们使用 derived state 存储过滤的 list：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    filterText<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// *******************************************************</span>\n  <span class=\"token comment\">// NOTE: this example is NOT the recommended approach.</span>\n  <span class=\"token comment\">// See the examples below for our recommendations instead.</span>\n  <span class=\"token comment\">// *******************************************************</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Re-run the filter whenever the list array or filter text change.</span>\n    <span class=\"token comment\">// Note we need to store prevPropsList and prevFilterText to detect changes.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      props<span class=\"token punctuation\">.</span>list <span class=\"token operator\">!==</span> state<span class=\"token punctuation\">.</span>prevPropsList <span class=\"token operator\">||</span>\n      state<span class=\"token punctuation\">.</span>prevFilterText <span class=\"token operator\">!==</span> state<span class=\"token punctuation\">.</span>filterText\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        prevPropsList<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">,</span>\n        prevFilterText<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>filterText<span class=\"token punctuation\">,</span>\n        filteredList<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span>\n          item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>filterText<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filterText<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>filterText<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>filteredList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个实现避免了不必要  <code class=\"language-text\">filteredList</code>  的重新计算。但这比原来的更复杂，因为他必须分开跟踪和检测 props 和 state 的变化，才能正确更新过滤后的列表。在这个例子中，我们能使用  <code class=\"language-text\">PureComponent</code>  简化工作，移动更新操作到 render 方法中：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// PureComponents only rerender if at least one state or prop value changes.</span>\n<span class=\"token comment\">// Change is determined by doing a shallow comparison of state and prop keys.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// State only needs to hold the current filter text value:</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    filterText<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filterText<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The render method on this PureComponent is called only if</span>\n    <span class=\"token comment\">// props.list or state.filterText has changed.</span>\n    <span class=\"token keyword\">const</span> filteredList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span>\n      item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>filterText<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>filterText<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>filteredList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这种途径比用 derived state 更加清晰且简单。偶尔地，这不够好——在大列表中过滤会变得慢，如果其他 prop 变化时  <code class=\"language-text\">PureComponent</code>  不会阻止重渲染。为了解决这些问题，我们可以加入一个 memoization helper 来避免对 list 的不必要过滤：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> memoize <span class=\"token keyword\">from</span> <span class=\"token string\">'memoize-one'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// State only needs to hold the current filter text value:</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> filterText<span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Re-run the filter whenever the list array or filter text changes:</span>\n  filter <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">,</span> filterText</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>filterText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> filterText<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Calculate the latest filtered list. If these arguments haven't changed</span>\n    <span class=\"token comment\">// since the last render, `memoize-one` will reuse the last return value.</span>\n    <span class=\"token keyword\">const</span> filteredList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>filterText<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>filterText<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>filteredList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这更加简单，而且性能和 derived state 版本的一样好！</p>\n<p>当使用 memoization 时，记住一些约束条件：</p>\n<ol>\n<li>在大多数案例中，你会想把 memoized 函数附加到组件实例上。这防止一个组件的多个实例重置彼此的 memoized key。</li>\n<li>通常地，你会想使用一个具有缓存大小限制的 memoization helper 来避免内存泄露问题。（在以上的例子中，我们用了  <code class=\"language-text\">memoize-one</code>  因为它仅缓存最近的参数和结果。）</li>\n<li>如果  <code class=\"language-text\">props.list</code>  在每次父组件渲染时被重新创建，本节中展示的实现手段是无法工作的。但在多数案例中，这种设置是适当的。</li>\n</ol>\n<hr>\n<h1>结语</h1>\n<p>在实际的应用中，组件经常包含受控和不受控行为的混合。这是没问题的！如果每一个值都有清晰的真实源，你可以避免上面提及的反模式。</p>\n<p>同样值得重申的是， <code class=\"language-text\">getDerivedStateFromProps</code> (一般的 derived state) 是一个高级特性，由于其复杂度，应该保守的使用它。如果你使用的案例超出这些模式，请在  <a href=\"https://link.zhihu.com/?target=https%3A//github.com/reactjs/reactjs.org/issues/new\">Github</a>  或  <a href=\"https://link.zhihu.com/?target=https%3A//twitter.com/reactjs\">Twitter</a>  上与我们分享！</p>\n<p>原文链接：<a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\">You Probably Don’t Need Derived State - React Blog</a></p>","frontmatter":{"title":"你可能不需要 Derived State","date":"2018-06-15T00:00:00.000Z"}}},"pageContext":{"slug":"/you-may-dont-need-drevied-state/","previous":{"fields":{"slug":"/react-official-sample-explanation/"},"frontmatter":{"title":"React 官網示例講解"}},"next":{"fields":{"slug":"/try-deno2/"},"frontmatter":{"title":"试玩 deno2"}}}}}