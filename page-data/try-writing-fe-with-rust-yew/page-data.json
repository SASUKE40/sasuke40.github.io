{"componentChunkName":"component---src-templates-blog-post-js","path":"/try-writing-fe-with-rust-yew/","result":{"data":{"site":{"siteMetadata":{"title":"Edward Elric"}},"markdownRemark":{"id":"827f606a-f9d5-53fe-a296-eb350aa39a27","excerpt":"前言 看到这篇文章，可能很多人会有个疑问：“已经有 React + TypeScript 这么好的组合，为什么还想着使用 Rust 来写前端页面，不折腾吗？”\n首先值得讨论的一点，接下来几年的前端方向有哪些？\n个人的愚见，在全栈领域必然是 serverless…","html":"<h1>前言</h1>\n<p>看到这篇文章，可能很多人会有个疑问：“已经有 React + TypeScript 这么好的组合，为什么还想着使用 Rust 来写前端页面，不折腾吗？”\n首先值得讨论的一点，接下来几年的前端方向有哪些？\n个人的愚见，在全栈领域必然是 serverless，我在业务开发中已经尝到甜头，高效、简便、心智负担很低了；而在 Web 领域，由于 2019 年 12 月 5 日— 万维网联盟（W3C）宣布 WebAssembly 核心规范成为正式标准，WASM 势必它的影响力会逐步提升。\nWASM 的框架 / 库的选择已经比较丰富了，如：C# + Blazor、Go + Vugu、Rust + Yew 等等。\n可能有人会问，为什么不能使用 TypeScript / JavaScript 来编译到 WASM，归根结底是因为 WASM 要求语言必须是静态强类型。当然可以魔改 TypeScript / JavaScript 做到这一点，例如 AssemblyScript / TurboScript 就是如此在 TypeScript / JavaScript 上做静态规范的。与其如此魔改，我个人觉得倒不如大大方方的使用静态强类型语言来编译到 WASM，反正魔改后也无法共享原有的生态。\n那么为什么选择 Rust 而不是其他的诸如 Go、C#、C / C++ 呢？这个确实没有很有说服力的理由，只是出于个人的技术偏好，或者说是受到 RY 使用 Rust 实现 Deno 的鼓舞吧。</p>\n<h1>准备</h1>\n<h2>环境陈述</h2>\n<p>我使用的是 macOS，很多人自然会想到使用 homebrew 来完成 Rust 环境 setup。一开始我也是这么做的，不过会遇到下面问题：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">error[E0463]: can&#39;t find crate for `std` | = note: the `wasm32-unknown-unknown` target may not be installed</code></pre></div>\n<p>最后还是走官方推荐的方式解决的。</p>\n<h2>Rust Installation</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh</code></pre></div>\n<h2>Yew Installation</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cargo install wasm-pack\ncargo install cargo-web</code></pre></div>\n<img width=\"850\" alt=\"Screen Shot 2020-01-04 at 10 39 02 PM\" src=\"https://user-images.githubusercontent.com/3114495/71768267-99f34400-2f4f-11ea-927f-9f919876c04f.png\">\n<img width=\"850\" alt=\"Screen Shot 2020-01-04 at 10 39 16 PM\" src=\"https://user-images.githubusercontent.com/3114495/71768269-9a8bda80-2f4f-11ea-8e2f-4fba76bfd7fd.png\">\n<h1>上手</h1>\n<h2>一些说明</h2>\n<p>Rust 本身就能实现编译到 WASM，使用 Yew 框架的原因就如其官网宣传：只是为了方便前端组件整合，以及对 JavaScript 互通性的考量。</p>\n<h2>项目初始化</h2>\n<p>这里不采用官网提供的参考，因为示例过于简单，有些脱离真正应用场景。下面的步骤是我个人认为比较接近真实开发的状态，相关源码我也放到 GitHub 供大家玩耍 ➡️<a href=\"https://github.com/SASUKE40/yew-starter\">https://github.com/SASUKE40/yew-starter</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone --depth=1 https://github.com/SASUKE40/yew-starter.git &lt;project_name&gt;</code></pre></div>\n<h2>目录结构</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── Cargo.lock\n├── Cargo.toml\n├── LICENSE\n├── README.md\n├── index.html\n├── index.js\n├── package-lock.json\n├── package.json\n└── src\n    ├── app.rs\n    └── lib.rs</code></pre></div>\n<p>这里面最重要的就是 <code class=\"language-text\">Cargo.toml</code> 了，其中最关键的依赖如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">lib</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">crate-type</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cdylib\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">wasm-bindgen</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.2\"</span>\n<span class=\"token key property\">yew</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.10.0\"</span></code></pre></div>\n<p><code class=\"language-text\">cdylib</code>  是用于配置构建 C interoperability(C FFI)，<code class=\"language-text\">wasm-bindgen</code> 依赖是用于 WASM 模块和 JavaScript 之间的交互粘合。</p>\n<h2>加载 WASM 以及 bind 的过程</h2>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">mod</span> app<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> wasm_bindgen<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">run_app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> JsValue<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  yew<span class=\"token punctuation\">::</span>start_app<span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span>app<span class=\"token punctuation\">::</span>App<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在需要导出 Rust 函数到 JavaScript 中，只需要在函数方法上注释 <code class=\"language-text\">#[wasm_bindgen]</code> 即可，接着在 js 文件中导入使用</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> run_app <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib'</span>\n<span class=\"token function\">run_app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>构建套件</h2>\n<p>使用 Parcel 是最方便的，开箱即用。既可以直接 import rs，也可以 import wasm。\n<img src=\"https://user-images.githubusercontent.com/3114495/71775834-453ce100-2fc2-11ea-8c66-27f19c0b8c98.png\" alt=\"image\">\n我这里用了 <code class=\"language-text\">parcel-plugin-wasm.rs</code> 插件完成 Cargo loader 的工作，和上述 import rs 的方式不同：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> run_app <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Cargo.toml'</span>\n<span class=\"token function\">run_app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Yew 组件编写体验</h2>\n<p>Yew 框架使用 <code class=\"language-text\">html!</code> macro 来生成 HTML</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> Component <span class=\"token keyword\">for</span> App <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span> Message <span class=\"token operator\">=</span> Msg<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">type</span> Properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span>Properties<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">:</span> ComponentLink<span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        App <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> _msg<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span>Message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> ShouldRender <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Html<span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro-rules function\">html!</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"Hello world!\"</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>模板中可以使用 <code class=\"language-text\">html! { &quot;Hello, World&quot; }</code> 这样的方式包裹文本或变量，这和 jsx 比较类似。\n事件绑定、条件、循环也都是类似的，大同小异：</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// 点击事件</span>\n<span class=\"token macro-rules function\">html!</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">&lt;</span>button onclick<span class=\"token operator\">=</span><span class=\"token operator\">|</span>_<span class=\"token operator\">|</span> Msg<span class=\"token punctuation\">::</span>Click<span class=\"token operator\">></span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"Click Me!\"</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 条件渲染</span>\n<span class=\"token macro-rules function\">html!</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> show_link <span class=\"token punctuation\">{</span>\n        <span class=\"token macro-rules function\">html!</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"https://example.com\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Link\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro-rules function\">html!</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 迭代渲染</span>\n<span class=\"token macro-rules function\">html!</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">&lt;</span>ul class<span class=\"token operator\">=</span><span class=\"token string\">\"item-list\"</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>renderItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>效果</h1>\n<p>Navigate to <a href=\"https://yew-starter.netlify.com/\">https://yew-starter.netlify.com/</a>\n<img src=\"https://user-images.githubusercontent.com/3114495/71775897-ffcce380-2fc2-11ea-85f8-c3fbae3099e2.png\" alt=\"image\">\n实际上 WASM 没有大家相信的那么“便携小巧”，WASM 吃掉的体积有 50kb。</p>\n<h1>总结</h1>\n<p>其优势：</p>\n<ul>\n<li>WebAssembly 在桌面客户端移植到 Web 不可或缺</li>\n<li>作为胶水包存在，如某面包姐姐最近就在尝试 Rust 2 WASM(CPP) 2 Node.js\n其疑点：</li>\n<li>高性能，感觉没有很突出到必须得这么做</li>\n<li>可移植性，要做 Web 的 JVM？</li>\n</ul>\n<p>WASM 的生态日趋丰富完善，未来 WASM 在前端必然会大放异彩。不过也无需夸大其地位，可以参考 <a href=\"https://www.zhihu.com/question/322007706/answer/741764049\">WebAssembly 的出现是否会取代 JavaScript？</a>这个知乎回答。摘抄官方对其定位的<a href=\"https://webassembly.org/docs/faq/\">一个回答</a>：WebAssembly 旨在作为 JavaScript 的补充而不是替代。\n<img src=\"https://user-images.githubusercontent.com/3114495/71776039-49b6c900-2fc5-11ea-9bab-23f88030bfa8.png\" alt=\"image\">\n通宵写文，求 🌟🌟 求关注，不胜感激 ⬇️\n<a href=\"https://github.com/SASUKE40/yew-starter\">https://github.com/SASUKE40/yew-starter</a></p>","frontmatter":{"title":"尝试用 Rust + Yew 写高性能前端页面","date":"2020-01-05T00:00:00.000Z"}}},"pageContext":{"slug":"/try-writing-fe-with-rust-yew/","previous":{"fields":{"slug":"/try-vscode-remote/"},"frontmatter":{"title":"尝试一下 VSCode Remote 开发 Node 应用"}},"next":{"fields":{"slug":"/a-guide-to-building-a-personal-website-with-gatsby/"},"frontmatter":{"title":"使用 Gatsby 搭建个人网站指南"}}}}}