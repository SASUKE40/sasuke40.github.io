{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js"],"names":["Bio","data","site","siteMetadata","author","social","style","display","marginBottom","rhythm","fixed","avatar","childImageSharp","alt","marginRight","minWidth","borderRadius","imgStyle","href","twitter","target","rel","github","BlogPostTemplate","render","post","this","props","markdownRemark","siteTitle","title","pageContext","previous","next","location","frontmatter","description","excerpt","marginTop","scale","moment","date","format","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","React","Component","pageQuery"],"mappings":"6KA4EeA,IA/DH,WACV,IAAMC,EAAI,OADM,EAsBWA,EAAKC,KAAKC,aAA7BC,EAtBQ,EAsBRA,OAAQC,EAtBA,EAsBAA,OAChB,OACE,yBACEC,MAAO,CACLC,QAAQ,OACRC,aAAcC,YAAO,OAGvB,kBAAC,IAAD,CACEC,MAAOT,EAAKU,OAAOC,gBAAgBF,MACnCG,IAAKT,EACLE,MAAO,CACLQ,YAAaL,YAAO,IACpBD,aAAc,EACdO,SAAU,GACVC,aAAa,QAEfC,SAAU,CACRD,aAAa,SAGjB,yCACa,gCAASZ,GADtB,4DAIE,uBAAGc,KAAI,uBAAyBb,EAAOc,SAAvC,oCAGA,sCACA,uBACEC,OAAO,SACPC,IAAI,sBACJH,KAAI,sBAAwBb,EAAOiB,QAHrC,c,6lDCtDFC,E,gLACJC,OAAA,WACE,IAAMC,EAAOC,KAAKC,MAAM1B,KAAK2B,eACvBC,EAAYH,KAAKC,MAAM1B,KAAKC,KAAKC,aAAa2B,MAF7C,EAGoBJ,KAAKC,MAAMI,YAA9BC,EAHD,EAGCA,SAAUC,EAHX,EAGWA,KAElB,OACE,kBAAC,IAAD,CAAQC,SAAUR,KAAKC,MAAMO,SAAUJ,MAAOD,GAC5C,kBAAC,IAAD,CACEC,MAAOL,EAAKU,YAAYL,MACxBM,YAAaX,EAAKU,YAAYC,aAAeX,EAAKY,UAEpD,iCACE,gCACE,wBACE/B,MAAO,CACLgC,UAAW7B,YAAO,GAClBD,aAAc,IAGfiB,EAAKU,YAAYL,OAEpB,uBACExB,MAAK,iBACAiC,aAAM,IADN,CAEHhC,QAAS,QACTC,aAAcC,YAAO,MAGtB+B,IAAOf,EAAKU,YAAYM,MAAMC,OAAO,gBAG1C,6BAASC,wBAAyB,CAAEC,OAAQnB,EAAKoB,QACjD,wBACEvC,MAAO,CACLE,aAAcC,YAAO,MAGzB,gCACE,kBAAC,IAAD,QAIJ,6BACE,wBACEH,MAAO,CACLC,QAAS,OACTuC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGX,4BACGjB,GACC,kBAAC,OAAD,CAAMkB,GAAIlB,EAASmB,OAAOC,KAAM/B,IAAI,QAApC,KACKW,EAASG,YAAYL,QAI9B,4BACGG,GACC,kBAAC,OAAD,CAAMiB,GAAIjB,EAAKkB,OAAOC,KAAM/B,IAAI,QAC7BY,EAAKE,YAAYL,MADpB,W,GA9DeuB,IAAMC,WA0EtB/B,YAER,IAAMgC,EAAS","file":"component---src-templates-blog-post-js-b57c3d48b5ff5262625b.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport { rhythm } from '../utils/typography'\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n          social {\n            twitter\n            github\n          }\n        }\n      }\n    }\n  `)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      <p>\n        Written by <strong>{author}</strong> who lives and works in China\n        building useful things.\n        {` `}\n        <a href={`https://twitter.com/${social.twitter}`}>\n          You should follow him on Twitter\n        </a>\n        <span> Or </span>\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={`https://github.com/${social.github}`}\n        >\n          Github\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport moment from 'moment'\n// import \"prismjs/themes/prism-solarizedlight.css\"\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { rhythm, scale } from '../utils/typography'\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n        />\n        <article>\n          <header>\n            <h1\n              style={{\n                marginTop: rhythm(1),\n                marginBottom: 0,\n              }}\n            >\n              {post.frontmatter.title}\n            </h1>\n            <p\n              style={{\n                ...scale(-1 / 5),\n                display: 'block',\n                marginBottom: rhythm(1),\n              }}\n            >\n              {moment(post.frontmatter.date).format('YYYY-MM-DD')}\n            </p>\n          </header>\n          <section dangerouslySetInnerHTML={{ __html: post.html }} />\n          <hr\n            style={{\n              marginBottom: rhythm(1),\n            }}\n          />\n          <footer>\n            <Bio />\n          </footer>\n        </article>\n\n        <nav>\n          <ul\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'space-between',\n              listStyle: 'none',\n              padding: 0,\n            }}\n          >\n            <li>\n              {previous && (\n                <Link to={previous.fields.slug} rel=\"prev\">\n                  ← {previous.frontmatter.title}\n                </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                <Link to={next.fields.slug} rel=\"next\">\n                  {next.frontmatter.title} →\n                </Link>\n              )}\n            </li>\n          </ul>\n        </nav>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date\n      }\n    }\n  }\n`\n"],"sourceRoot":""}