<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Frontend on Shilin's Blog</title><link>https://edward40.com/categories/frontend/</link><description>Recent content in Frontend on Shilin's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 16 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://edward40.com/categories/frontend/index.xml" rel="self" type="application/rss+xml"/><item><title>Recoil 一个基于 actor 模型的 React 状态管理库</title><link>https://edward40.com/p/recoil-a-state-management-system-for-react/</link><pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate><guid>https://edward40.com/p/recoil-a-state-management-system-for-react/</guid><description>&lt;img src="https://edward40.com/p/recoil-a-state-management-system-for-react/Recoil%20at%20React%20Europe%202020%2000-07-24%20.png" alt="Featured image of post Recoil 一个基于 actor 模型的 React 状态管理库" />&lt;h1 id="前言">前言
&lt;/h1>&lt;p>最近在 React Europe 2020 Conference 上， facebook 内部释出一个状态管理库 &lt;a class="link" href="https://recoiljs.org/" target="_blank" rel="noopener"
>Recoil&lt;/a>&lt;/p>
&lt;p>通过官方的宣传以及初步的使用，Recoil 在处理 shared state 上比较方便，也能做到最小度的更新来提升复杂 App 的性能。不过有趣的是，对 Recoil 的 &lt;code>atom&lt;/code> &lt;code>selector&lt;/code> 这些 API 设计而言，其实就是早在 47 年提出的 &lt;strong>Actor Model&lt;/strong>，可谓是前端状态管理的文艺复兴。&lt;/p>
&lt;h1 id="actor-model-部分">Actor Model 部分
&lt;/h1>&lt;h2 id="什么是-actor-model">什么是 Actor Model
&lt;/h2>&lt;p>Actor 模型(Actor model)首先是由 Carl Hewitt 在 1973 定义， 由 Erlang OTP(Open Telecom Platform) 推广，其消息传递更加符合面向对象的原始意图。Actors 属于并发组件模型，通过组件方式定义并发编程范式的高级阶段，避免使用者直接接触多线程并发或线程池等基础概念。&lt;/p>
&lt;p>流行语言并发是基于多线程之间的共享内存，使用同步方法防止写争夺，Actors 使用消息模型，每个 Actors 在同一时间处理最多一个消息，可以发送消息给其他 Actors，保证了单独写原则。从而巧妙避免了多线程写争夺。&lt;/p>
&lt;p>Actor Model 主要有几个特点：&lt;/p>
&lt;ul>
&lt;li>轻量：Actor 是系统内的一个基础单位，每个 Actor 只负责自己的工作&lt;/li>
&lt;li>没有 Shared State：每个 Actor 各自管理自己的 state，跑在各自的 thread 上，不共享内存和 state&lt;/li>
&lt;li>通过消息传递：每个 Actor 有一个消息队列，类似 MailBox / Queue，接受到的消息会在此队列等待依次执行&lt;/li>
&lt;/ul>
&lt;h2 id="谁使用-actor-model">谁使用 Actor Model
&lt;/h2>&lt;ul>
&lt;li>Erlang&lt;/li>
&lt;li>Akka&lt;/li>
&lt;li>Vert.x&lt;/li>
&lt;li>Actix&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h1 id="recoil-部分">Recoil 部分
&lt;/h1>&lt;h2 id="recoil-产生背景">Recoil 产生背景
&lt;/h2>&lt;p>前端的应用越来越复杂，诸如常见的 Web 监控面板，包含各类的性能数据、节点信息、分类聚合用来进行应用分析。可以想象得到面板中包含各类的交互行为，编辑、删除、添加、将一个数据源绑定多个面板等等。除此之外，还需要对数据持久化，这样就能把 url 分享给其他人，并要确保被分享的人看到的是一致的。&lt;/p>
&lt;p>因此开发过程中要尽量做到页面最小化更新达到高性能的目的，需要对数据流的操作更加精细。&lt;/p>
&lt;p>![](Recoil at React Europe 2020 00-00-12 .jpg)&lt;/p>
&lt;p>面对这样的挑战，一般会想到用一些状态管理的函数或者库，如 React 内置的 state 管理，或者 Redux。&lt;/p>
&lt;p>Recoil 想通过一个不一样的方式来解决这些问题，主要分为 3 个方面：&lt;/p>
&lt;ul>
&lt;li>Flexible shared state: 在 react tree 任意的地方都能灵活共享 state，并保持高性能&lt;/li>
&lt;li>Derived data and queries: 高效可靠地根据变化的 state 进行计算&lt;/li>
&lt;li>App-wide state observation: time travel debugging, 支持 undo, 日志持久化&lt;/li>
&lt;/ul>
&lt;p>##Recoil 主要设计&lt;/p>
&lt;h3 id="shared-state">Shared state
&lt;/h3>&lt;p>有一个应用基于这样一个场景，将 List 中更新一个节点，然后对应 Canvas 中的节点也更新&lt;/p>
&lt;p>![](Recoil at React Europe 2020 00-04-55 .png)&lt;/p>
&lt;h4 id="第-1-种方式">第 1 种方式
&lt;/h4>&lt;p>把 state 传到公共的父节点转发给 canvas 子节点，这样显然会全量 re-render&lt;/p>
&lt;h4 id="第-2-种方式">第 2 种方式
&lt;/h4>&lt;p>给父节点加 Provider 在子节点加 Consumer，不过每多加一个 item 就要多一层 Provider&lt;/p>
&lt;p>![](Recoil at React Europe 2020 00-06-43 .png)&lt;/p>
&lt;h4 id="第-3-种方式">第 3 种方式
&lt;/h4>&lt;p>在 react tree 上创建另一个正交的 tree，把每片 item 的 state 抽出来。每个 component 都有对应单独的一片 state，当数据更新的时候对应的组件也会更新。Recoil 把 这每一片的数据称为 Atom，Atom 是可订阅可变的 state 单元。&lt;/p>
&lt;p>![](Recoil at React Europe 2020 00-07-24 .png)&lt;/p>
&lt;p>配合 &lt;code>useRecoilState&lt;/code> 可以使用这些 Atom，实践上对多个 item 的 Atom 可以用 memorize 进行优化，具体可以在官方文档查看，这里不赘述。&lt;/p>
&lt;h3 id="derived-data">Derived Data
&lt;/h3>&lt;p>有这么一个场景需要根据多个 Item Box 计算 Bounding Box&lt;/p>
&lt;p>&lt;img src="https://edward40.com/p/recoil-a-state-management-system-for-react/derived_data.png"
width="581"
height="297"
srcset="https://edward40.com/p/recoil-a-state-management-system-for-react/derived_data_hu_269ae0c5846a3eff.png 480w, https://edward40.com/p/recoil-a-state-management-system-for-react/derived_data_hu_abc944180012f5d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>&lt;/p>
&lt;p>如果你是 Vue 的爱好者，你可能想到了计算属性。Derived Data 确实有 computed props 的味道，具体思路是选取多个 Atom 进行计算，然后返回一个新的 state。因此在 Recoil 中设计了 &lt;code>select&lt;/code> 这样的 API 来选取多个 Atom 进行计算。&lt;/p>
&lt;p>![](Recoil at React Europe 2020 00-14-53 .png)&lt;/p>
&lt;p>&lt;code>select&lt;/code> 的设计和 Proxy 挺像的，属性上有 &lt;code>get&lt;/code> 进行读取，有 &lt;code>set&lt;/code> 进行设置，函数内部又有 &lt;code>get&lt;/code>， &lt;code>set&lt;/code> 操作 state&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">atom&lt;/span>, &lt;span style="color:#a6e22e">selector&lt;/span>, &lt;span style="color:#a6e22e">useRecoilState&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;recoil&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">tempFahrenheit&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">atom&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;tempFahrenheit&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">tempCelcius&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">selector&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;tempCelcius&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">:&lt;/span> ({ &lt;span style="color:#a6e22e">get&lt;/span> }) =&amp;gt; ((&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">tempFahrenheit&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">set&lt;/span>&lt;span style="color:#f92672">:&lt;/span> ({ &lt;span style="color:#a6e22e">set&lt;/span> }, &lt;span style="color:#a6e22e">newValue&lt;/span>) =&amp;gt; &lt;span style="color:#a6e22e">set&lt;/span>(&lt;span style="color:#a6e22e">tempFahrenheit&lt;/span>, (&lt;span style="color:#a6e22e">newValue&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="app-wide-observation">App-wide observation
&lt;/h3>&lt;p>这个场景下需要把 url 分享给其他人，别人打开相同的链接也能看到一样的页面。&lt;/p>
&lt;p>那么就需要 observe Atom 的变更，Recoil 使用 &lt;code>useTransactionObservation&lt;/code> 进行订阅&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">useTransactionObservation&lt;/span>(({&lt;span style="color:#a6e22e">atomValues&lt;/span>,&lt;span style="color:#a6e22e">modifiedAtoms&lt;/span>,...} =&amp;gt; {}))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另一方面，打开链接的时候也需要对输入的数据进行校验&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">counter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">atom&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;myCounter&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">validator&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">untrustedInput&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metadata&lt;/span>&lt;span style="color:#f92672">:&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>##Recoil 后续&lt;/p>
&lt;p>目前 Recoil 还属于实验阶段，不过能确定的是 Recoil 会兼容 React Concurrent Mode&lt;/p>
&lt;h1 id="actor-model--recoil-联系">Actor Model &amp;amp; Recoil 联系
&lt;/h1>&lt;p>通过前面提及 Recoil 的设计，可以发现两者的理念是相似的。&lt;/p>
&lt;p>在实现的细节中 Recoil 维护了新的队列，并通过订阅、派发的机制完成消息的传递及组件的更新。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Fire or enqueue callbacks to rerender components that are subscribed to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// nodes affected by the updatedNodes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">fireNodeSubscriptions&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">store&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">updatedNodes&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">$ReadOnlySet&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">NodeKey&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">when&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;enqueue&amp;#39;&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#39;now&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> This is called in two conditions: When an atom is set (with &amp;#39;enqueue&amp;#39;) and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> when an async selector resolves (with &amp;#39;now&amp;#39;). When an atom is set, we want
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> to use the latest dependencies that may have become dependencies due to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> earlier changes in a batch. But if an async selector happens to resolve during
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> a batch, it should use the currently rendered output, and then the end of the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> batch will trigger any further subscriptions due to new deps in the new state.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">when&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;enqueue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">getState&lt;/span>().&lt;span style="color:#a6e22e">nextTree&lt;/span> &lt;span style="color:#f92672">??&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">getState&lt;/span>().&lt;span style="color:#a6e22e">currentTree&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">getState&lt;/span>().&lt;span style="color:#a6e22e">currentTree&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">dependentNodes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getDownstreamNodes&lt;/span>(&lt;span style="color:#a6e22e">state&lt;/span>, &lt;span style="color:#a6e22e">updatedNodes&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span> &lt;span style="color:#a6e22e">dependentNodes&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ;(&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">nodeToComponentSubscriptions&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>) &lt;span style="color:#f92672">??&lt;/span> []).&lt;span style="color:#a6e22e">forEach&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ([&lt;span style="color:#a6e22e">debugName&lt;/span>, &lt;span style="color:#a6e22e">cb&lt;/span>]) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">when&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;enqueue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">getState&lt;/span>().&lt;span style="color:#a6e22e">queuedComponentCallbacks&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">cb&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">cb&lt;/span>(&lt;span style="color:#a6e22e">state&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Wake all suspended components so the right one(s) can try to re-render.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// We need to wake up components not just when some asynchronous selector
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// resolved (when === &amp;#39;now&amp;#39;), but also when changing synchronous values because
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// they may cause a selector to change from asynchronous to synchronous, in
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// which case there would be no follow-up asynchronous resolution to wake us up.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// TODO OPTIMIZATION Only wake up related downstream components
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Tracing&lt;/span>.&lt;span style="color:#a6e22e">trace&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;value became available, waking components&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Array.&lt;span style="color:#a6e22e">from&lt;/span>(&lt;span style="color:#a6e22e">updatedNodes&lt;/span>).&lt;span style="color:#a6e22e">join&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;, &amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">resolvers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">getState&lt;/span>().&lt;span style="color:#a6e22e">suspendedComponentResolvers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resolvers&lt;/span>.&lt;span style="color:#a6e22e">forEach&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">r&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resolvers&lt;/span>.&lt;span style="color:#a6e22e">clear&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实 Recoil 不是 Actor Model 在前端的首次实践，2 年前 PolymerLabs 就有 &lt;a class="link" href="https://github.com/PolymerLabs/actor-helpers" target="_blank" rel="noopener"
>actor-helpers&lt;/a> 以及 &lt;a class="link" href="https://github.com/PolymerLabs/actor-boilerplate" target="_blank" rel="noopener"
>actor-boilerplate&lt;/a> 相关的实践。不过在 React 强大的生态以及 React Hooks 的加持之下，用 Sync 的方式做到异步 state 管理和共享，同时保持交互流程、高性能的 Recoil 算是补充了一个不错的方案。&lt;/p>
&lt;h1 id="补充">补充
&lt;/h1>&lt;p>Recoil 刚刚释出实验版本，我想正好可以在不断更改的过程中了解前端 Actor Model 的实现方式步骤。&lt;/p>
&lt;p>另外，其实不少人批评前端的发展就是到处借鉴，没有新的事物，像是 WPF 就有很多前端可以借鉴的地方（确实也如此）。&lt;/p>
&lt;p>不过在我看来，放到一个比较长的时期里，前端慢慢吸收各类后端、客户端的设计思想才产生“新”事物是很正常的发展进程。包括经常被提到的 Vue 和 React 孰优孰劣之争，Node.js 不堪大用等等话题，其实都是历史发展及其技术定位所致。可能对其他领域的看来是不新鲜，但对前端而言是语言发展（残疾而缝合的 JavaScript）、生态繁荣才有可能繁衍出这些对前端而言的新事物。&lt;/p></description></item><item><title>对比 Vue Composition API 和 React Hooks</title><link>https://edward40.com/p/compare-vue-composition-api-with-react-hooks/</link><pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate><guid>https://edward40.com/p/compare-vue-composition-api-with-react-hooks/</guid><description>&lt;img src="https://edward40.com/p/compare-vue-composition-api-with-react-hooks/vue.jpg" alt="Featured image of post 对比 Vue Composition API 和 React Hooks" />&lt;h1 id="引言">引言
&lt;/h1>&lt;p>最近 &lt;a class="link" href="https://github.com/vuejs/vue-next" target="_blank" rel="noopener"
>Vue 3.0&lt;/a> 发布了 Beta 版本，其中最引人注意的就是其 &lt;code>Composition API&lt;/code>。而这个设计近期经常被拿来和
&lt;code>React Hooks&lt;/code> 进行比较，以下是两个代码片段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// React
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span>(&lt;span style="color:#a6e22e">props&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> [&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">setA&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">useState&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">onClick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{() =&amp;gt; &lt;span style="color:#a6e22e">setA&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)}&amp;gt;{&lt;span style="color:#a6e22e">a&lt;/span>}&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Vue 3 composition API
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span>(&lt;span style="color:#a6e22e">props&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ref&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">setA&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">onClick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">setA&lt;/span>}&amp;gt;{&lt;span style="color:#a6e22e">a&lt;/span>}&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看到两者的心智模型非常不同，React 编程范式更接近于纯函数，Vue 则采取了 Reactivity 的模式。&lt;/p>
&lt;h1 id="react-hooks-的心智负担">React Hooks 的心智负担
&lt;/h1>&lt;p>React Hooks 是在 2018 年 10 月 React Conf 的时候正式向广大开发者进行宣传，在当时看到 Dan Abramov 演讲以及现场使用 React Hooks 重构 Class Component 的时候简直惊为天人，那一刻我深深被 Function Programming 所着迷。
然而，直到如今一年半开发者各种实践，发现 React Hooks 并没有想象中的那么美好。你现在可以在知乎、掘金等各类平台上搜寻到大量的《React Hooks 最佳实践》，这不禁让人深思：React Hooks 怎么没那么美好了？&lt;/p>
&lt;p>React Hooks 开发经常提及的一些问题我列举几个：&lt;/p>
&lt;ol>
&lt;li>我该使用单个 state 变量还是多个 state 变量？&lt;/li>
&lt;li>deps 依赖过多，导致 Hooks 难以维护？&lt;/li>
&lt;li>该不该使用 useMemo？&lt;/li>
&lt;/ol>
&lt;p>然后基于这些问题的最佳实践，人们又总结出：&lt;/p>
&lt;ol>
&lt;li>将完全不相关的 state 拆分为多组 state。&lt;/li>
&lt;li>如果某些 state 是相互关联的，或者需要一起发生改变，就可以把它们合并为一组 state。&lt;/li>
&lt;li>依赖数组依赖的值最好不要超过 3 个，否则会导致代码会难以维护。&lt;/li>
&lt;li>如果发现依赖数组依赖的值过多，我们应该采取一些方法来减少它。
&lt;ol>
&lt;li>去掉不必要的依赖。&lt;/li>
&lt;li>将 Hook 拆分为更小的单元，每个 Hook 依赖于各自的依赖数组。&lt;/li>
&lt;li>通过合并相关的 state，将多个依赖值聚合为一个。&lt;/li>
&lt;li>通过 setState 回调函数获取最新的 state，以减少外部依赖。&lt;/li>
&lt;li>通过 ref 来读取可变变量的值，不过需要注意控制修改它的途径。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>应该使用 useMemo 的场景：
&lt;ol>
&lt;li>保持引用相等&lt;/li>
&lt;li>成本很高的计算&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>无需使用 useMemo 的场景：
&lt;ol>
&lt;li>如果返回的值是原始值： string, boolean, null, undefined, number, symbol（不包括动态声明的 Symbol），一般不需要使用 useMemo。&lt;/li>
&lt;li>仅在组件内部用到的 object、array、函数等（没有作为 props 传递给子组件），且没有用到其他 Hook 的依赖数组中，一般不需要使用 useMemo。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Hooks、Render Props 和高阶组件都有各自的使用场景，具体使用哪一种要看实际情况。&lt;/li>
&lt;li>若 Hook 类型相同，且依赖数组一致时，应该合并成一个 Hook。&lt;/li>
&lt;li>自定义 Hooks 的返回值可以使用 Tuple 类型，更易于在外部重命名。如果返回的值过多，则不建议使用。&lt;/li>
&lt;li>ref 不要直接暴露给外部使用，而是提供一个修改值的方法。&lt;/li>
&lt;li>在使用 useMemo 或者 useCallback 时，可以借助 ref 或者 setState callback，确保返回的函数只创建一次。也就是说，函数不会根据依赖数组的变化而二次创建。&lt;/li>
&lt;/ol>
&lt;p>React Hooks 给人一种美丽的错觉，Function Component 可以非常简单，但长期开发下才逐渐暴露出函数式编程在 JavaScript 中的困境。
对这个问题大家在思考，而 Vue 3.0 也在思考如何从 React Hooks 上取其精华去其糟粕。我们可以在 Vue RFC 中看到最初的 &lt;a class="link" href="https://github.com/vuejs/rfcs/pull/17" target="_blank" rel="noopener"
>Class API&lt;/a> 到 &lt;a class="link" href="https://github.com/vuejs/rfcs/pull/42" target="_blank" rel="noopener"
>Function-based Component API&lt;/a> 取其 FP 的精华，再到被修订为 &lt;a class="link" href="https://github.com/vuejs/rfcs/pull/78" target="_blank" rel="noopener"
>Composition API&lt;/a> 采用 Reactivity 的过程。&lt;/p>
&lt;p>这种改变和 JavaScript 这门语言本身的编程范式离不开，主要还是围绕一等公民函数、动态类型这两点。&lt;/p>
&lt;h1 id="vue-composition-api-是否美好">Vue Composition API 是否美好
&lt;/h1>&lt;p>Vue 一直被人所称道的就是其开发简便，这也是隐式依赖跟踪带来的便利。然而成也萧何败也萧何，Vue 诟病的一点就是闭包对象的不可预测性，例如 this。&lt;/p>
&lt;p>在 Vue Composition API 中，我发现官方对 Ref 和 Reactive 给出了最佳实践。可能这里就有所谓的幻灭存在，就像当年很多人不听 React 官方最佳实践，在 componentWillMount 里获取数据一样。&lt;/p>
&lt;p>&lt;a class="link" href="https://composition-api.vuejs.org/#ref-vs-reactive" target="_blank" rel="noopener"
>Ref vs. Reactive&lt;/a> 章节中有如下的对比：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// style 1: separate variables
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">updatePosition&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">pageX&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">pageY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// --- compared to ---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// style 2: single object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">pos&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">y&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">updatePosition&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pos&lt;/span>.&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">pageX&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pos&lt;/span>.&lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">pageY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么依赖跟踪的迷惑就此开始，因为当你对已经 reactive 的对象进行解构赋值或者赋给新值的时候，依赖跟踪就失效了。官方对这个的态度比较模糊：&lt;/p>
&lt;blockquote>
&lt;p>在现阶段，我们认为在 ref vs reactive 上实施最佳做法为时尚早。我们建议您从上面的两个选项中选择与您的心智模型相符的方式。我们将收集实开发场景下的用户真反馈，并最终提供有关此主题的更明确的指导。&lt;/p>&lt;/blockquote>
&lt;h1 id="对比两者">对比两者
&lt;/h1>&lt;ul>
&lt;li>Vue Composition API：闭包变量、响应式的依赖追踪&lt;/li>
&lt;li>React Hooks: 纯函数、无副作用&lt;/li>
&lt;/ul>
&lt;p>其实没有好坏之分，在 JavaScript 这种编程范式模棱两可的语言中，你既可以写函数，但又不能不让改引用变量（像 cpp 的 const&amp;amp; 一般），你又可以面向对象编程（像 Java 一样疯狂反射，咻咻咻）。&lt;/p>
&lt;p>其实语言、框架没有优劣，主要看使用的人对其理解到什么程度。使用 React Hooks 就要尽量采用 immutable 变量，降低函数调用过频影响性能（部分 React 调度策略兜底）；使用 Vue 就尽量不要依赖跟踪丢失或者滥用依赖跟踪导致行为不可预测。&lt;/p>
&lt;h1 id="最后">最后
&lt;/h1>&lt;p>React 和 Vue 没有不可调和之处，他们是 JavaScript 这门语言一体两面的提现。&lt;/p>
&lt;p>未来哪个社区更加繁荣还是要看 TC39 把 JavaScript 带向何方，是更加 Functional Programming 呢？还是更加 Imperative Programming 呢？&lt;/p></description></item><item><title>使用 Gatsby 搭建个人网站指南</title><link>https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/</guid><description>&lt;img src="https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/gatsby.jpg" alt="Featured image of post 使用 Gatsby 搭建个人网站指南" />&lt;h1 id="前言">前言
&lt;/h1>&lt;p>相信大部分程序员都有自己个人网站，或者是托管在各大平台上的技术博客。&lt;/p>
&lt;p>大概在大一的时候我也萌生搭建个人博客的想法，最早还是比较流行自己买一个 VPS、域名，然后搭建 &lt;strong>WordPress&lt;/strong>。不过由于没续费，东西也没妥善备份也不知道去哪里了。
接着网络兴起&lt;strong>轻博客&lt;/strong>，我想着自己塔多不方便，就用了&lt;strong>点点网&lt;/strong>写自己的博客，在上面沉淀不少文章，然而点点网在 2016 年也关闭了。&lt;/p>
&lt;p>自建和博客平台都不靠谱，我便转向了 &lt;strong>GitHub Pages&lt;/strong>，正好那一阵流行用 &lt;code>hexo&lt;/code> 生成静态博客站点，于是就搭建了一个放了些文章。其实放到现在来看主题还是挺好看的，不过由于我没有备份的良好习惯，有几篇文章的 md 文件被我弄丢了。&lt;/p>
&lt;p>因此，这次我把整个站点备份了一下（学乖了），并在上面盖新的个人网站。因为比较熟悉 React 的缘故，这次用的是 &lt;code>Gatsby&lt;/code> 进行搭建。&lt;/p>
&lt;h1 id="准备工作">准备工作
&lt;/h1>&lt;ol>
&lt;li>安装 Gatsby CLI&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm install -g gatsby-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>创建项目&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>gatsby new
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>目录结构如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── LICENSE
├── README.md
├── content
├── gatsby-browser.js
├── gatsby-config.js
├── gatsby-node.js
├── node_modules
├── package-lock.json
├── package.json
├── src
└── static
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>本地开发&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>gatsby develop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>常用的插件&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-plugin-feed&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^2.3.25&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-plugin-google-analytics&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^2.1.31&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-plugin-manifest&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^2.2.34&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-plugin-offline&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^3.0.30&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-plugin-react-helmet&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^3.1.18&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-plugin-sharp&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^2.3.10&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-plugin-typography&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^2.3.20&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-remark-copy-linked-files&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^2.1.33&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-remark-images&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^3.1.39&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-remark-prismjs&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^3.3.28&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-remark-responsive-iframe&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^2.2.30&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-remark-smartypants&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^2.1.19&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-source-filesystem&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^2.1.43&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-transformer-remark&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^2.6.45&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;gatsby-transformer-sharp&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^2.3.9&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="配置及开发">配置及开发
&lt;/h1>&lt;h2 id="配置">配置
&lt;/h2>&lt;p>首先最重要的就是 &lt;code>gatsby-config.js&lt;/code> 文件了，我们需要在里面启用上述安装的插件，配置可以到 &lt;a class="link" href="https://github.com/SASUKE40/sasuke40.github.io" target="_blank" rel="noopener"
>sasuke40.githu.io&lt;/a> 查看。&lt;/p>
&lt;p>还有得去 &lt;a class="link" href="https://analytics.google.com/" target="_blank" rel="noopener"
>google analytics&lt;/a> 配置一下记录站点的访问信息。
&lt;img src="https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/google_analytics.png"
width="1704"
height="1464"
srcset="https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/google_analytics_hu_42506dbab9fa3456.png 480w, https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/google_analytics_hu_de2234577a7871f8.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="279px"
>
配置结束会给你个跟踪 ID，在配置文件 &lt;code>gatsby-plugin-google-analytics&lt;/code> 下修改就行。&lt;/p>
&lt;h2 id="开发-dark-mode">开发 Dark Mode
&lt;/h2>&lt;p>其实上面配置完成基本上站点就能用了，不过 Gatsby 最好玩的是他的灵活。自带的没有夜间模式，下面我快速介绍一下怎么开发。&lt;/p>
&lt;p>&lt;img src="https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/add_dark_mode.png"
width="1346"
height="1692"
srcset="https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/add_dark_mode_hu_588fd42caec8b945.png 480w, https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/add_dark_mode_hu_942143c91bc59aef.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="190px"
>&lt;/p>
&lt;ol>
&lt;li>注入全局函数
在 src 目录下新建 &lt;code>html.js&lt;/code>，开发一个用于控制主题的全局函数&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dangerouslySetInnerHTML&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">__html&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> (function() {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> window.__onThemeChange = function() {};
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> function setTheme(newTheme) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> window.__theme = newTheme;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> preferredTheme = newTheme;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> document.body.className = newTheme;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> window.__onThemeChange(newTheme);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> var preferredTheme;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> try {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> preferredTheme = localStorage.getItem(&amp;#39;theme&amp;#39;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> } catch (err) { }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> window.__setPreferredTheme = function(newTheme) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> setTheme(newTheme);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> try {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> localStorage.setItem(&amp;#39;theme&amp;#39;, newTheme);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> } catch (err) {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> var darkQuery = window.matchMedia(&amp;#39;(prefers-color-scheme: dark)&amp;#39;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> darkQuery.addListener(function(e) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> window.__setPreferredTheme(e.matches ? &amp;#39;dark&amp;#39; : &amp;#39;light&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> });
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> setTheme(preferredTheme || (darkQuery.matches ? &amp;#39;dark&amp;#39; : &amp;#39;light&amp;#39;));
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> })();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> `&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>开发 Toggle 组件&lt;/li>
&lt;/ol>
&lt;p>准备好两张 Icon 图片，然后把 &lt;a class="link" href="https://github.com/aaronshaf/react-toggle/" target="_blank" rel="noopener"
>react-toggle&lt;/a> 魔改一下就行。&lt;/p>
&lt;ol start="3">
&lt;li>修改 layout&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">theme&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">Toggle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">icons&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">checked&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">img&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">moon&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">height&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">role&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;presentation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">style&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{{ &lt;span style="color:#a6e22e">pointerEvents&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;none&amp;#39;&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">unchecked&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">img&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{sun}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">height&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">role&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;presentation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">style&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{{ &lt;span style="color:#a6e22e">pointerEvents&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;none&amp;#39;&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">checked&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">theme&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dark&amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">e&lt;/span> =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window.&lt;span style="color:#a6e22e">__setPreferredTheme&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">checked&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dark&amp;#39;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;light&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#f92672">:&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">style&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{{ &lt;span style="color:#a6e22e">height&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;24px&amp;#39;&lt;/span> }} /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>编写全局样式
编写 &lt;code>global.css&lt;/code> 并在 &lt;code>typography.js&lt;/code> 导入它，主要工作是给 body 配置 css 变量&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --pink: rgb(&lt;span style="color:#ae81ff">255&lt;/span>, &lt;span style="color:#ae81ff">167&lt;/span>, &lt;span style="color:#ae81ff">196&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#a6e22e">var&lt;/span>(&lt;span style="color:#f92672">--&lt;/span>bg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span>.&lt;span style="color:#a6e22e">light&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --bg: &lt;span style="color:#ae81ff">#ffffff&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --bg-secondary: rgb(&lt;span style="color:#ae81ff">249&lt;/span>, &lt;span style="color:#ae81ff">250&lt;/span>, &lt;span style="color:#ae81ff">251&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --header: &lt;span style="color:#a6e22e">var&lt;/span>(&lt;span style="color:#f92672">--&lt;/span>&lt;span style="color:#66d9ef">pink&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --textNormal: &lt;span style="color:#ae81ff">#222&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --textTitle: &lt;span style="color:#ae81ff">#222&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --textLink: &lt;span style="color:#ae81ff">#d23669&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --hr: hsla(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --inlineCode-bg: rgba(&lt;span style="color:#ae81ff">255&lt;/span>, &lt;span style="color:#ae81ff">229&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --inlineCode-text: &lt;span style="color:#ae81ff">#1a1a1a&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --form-shadow: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> rgba(&lt;span style="color:#ae81ff">210&lt;/span>, &lt;span style="color:#ae81ff">214&lt;/span>, &lt;span style="color:#ae81ff">220&lt;/span>, &lt;span style="color:#ae81ff">0.5&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">body&lt;/span>.&lt;span style="color:#a6e22e">dark&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">-webkit-&lt;/span>font-smoothing: antialiased;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --bg: &lt;span style="color:#ae81ff">#282c35&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --bg-secondary: rgb(&lt;span style="color:#ae81ff">54&lt;/span>, &lt;span style="color:#ae81ff">60&lt;/span>, &lt;span style="color:#ae81ff">72&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --header: &lt;span style="color:#ae81ff">#ffffff&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --textNormal: rgba(&lt;span style="color:#ae81ff">255&lt;/span>, &lt;span style="color:#ae81ff">255&lt;/span>, &lt;span style="color:#ae81ff">255&lt;/span>, &lt;span style="color:#ae81ff">0.88&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --textTitle: &lt;span style="color:#ae81ff">#ffffff&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --textLink: &lt;span style="color:#a6e22e">var&lt;/span>(&lt;span style="color:#f92672">--&lt;/span>&lt;span style="color:#66d9ef">pink&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --hr: hsla(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --inlineCode-bg: rgba(&lt;span style="color:#ae81ff">115&lt;/span>, &lt;span style="color:#ae81ff">124&lt;/span>, &lt;span style="color:#ae81ff">153&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --inlineCode-text: &lt;span style="color:#ae81ff">#ffee93&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --form-shadow: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> rgba(&lt;span style="color:#ae81ff">26&lt;/span>, &lt;span style="color:#ae81ff">26&lt;/span>, &lt;span style="color:#ae81ff">27&lt;/span>, &lt;span style="color:#ae81ff">0.637&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终效果就是这样
&lt;img src="https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/result.png"
width="1418"
height="1576"
srcset="https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/result_hu_addfaaa7fb03e672.png 480w, https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/result_hu_465b00a87fa1cc4e.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="215px"
>&lt;/p>
&lt;h1 id="部署">部署
&lt;/h1>&lt;ol>
&lt;li>安装 gh-pages&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm install gh-pages --save-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>配置部署脚本&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;scripts&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;deploy&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>推送源码到 dev 分支&lt;/li>
&lt;/ol>
&lt;p>Github Pages 有个特殊的规则，就是 &amp;lt;username&amp;gt;.github.io 会默认使用 &lt;code>master&lt;/code> 分支中的生产代码。这也就是为什么 &lt;code>gh-pages -d public -b master&lt;/code> 中是指定 &lt;code>master&lt;/code>，而不是 &lt;code>gh-pages&lt;/code>。&lt;/p>
&lt;p>因此，源码就需要放到非 &lt;code>master&lt;/code> 分支上。我把博客的源码推到 &lt;code>dev&lt;/code> 分支，并将其设置为默认。
&lt;img src="https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/github_pages_setting.png"
width="1534"
height="512"
srcset="https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/github_pages_setting_hu_9d8877c167ac5edb.png 480w, https://edward40.com/p/a-guide-to-building-a-personal-website-with-gatsby/github_pages_setting_hu_132e3db4c678ce18.png 1024w"
loading="lazy"
alt="image"
class="gallery-image"
data-flex-grow="299"
data-flex-basis="719px"
>&lt;/p>
&lt;ol start="4">
&lt;li>推送构建后的生产代码&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm run deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>推送后应该稍微等一下，就可以访问个人网站了。&lt;/p>
&lt;h1 id="总结">总结
&lt;/h1>&lt;p>Gastby 优势&lt;/p>
&lt;ul>
&lt;li>相当的灵活，给个人网站巨大的修改空间&lt;/li>
&lt;li>支持 graphql，数据调用方便&lt;/li>
&lt;li>生态强大，1500+ 数量的插件基本满足大部分需求&lt;/li>
&lt;/ul>
&lt;p>Gastby 劣势&lt;/p>
&lt;ul>
&lt;li>因其灵活，对个人博客的友好度就没那么高，md 文件及文件夹需要自己建立。不像 hexo 可以 &lt;code>hexo new [layout] &amp;lt;title&amp;gt;&lt;/code> 这么方便&lt;/li>
&lt;/ul>
&lt;p>总体来说，我对 Gatsby 还挺满意的。要是大家挖掘到好玩的插件、好看的主题也欢迎留言。
最后，也欢迎大家互换友链 ➡️&lt;a class="link" href="https://sasuke40.github.io/" target="_blank" rel="noopener"
>Edward Elric&lt;/a>&lt;/p></description></item><item><title>尝试用 Rust + Yew 写高性能前端页面</title><link>https://edward40.com/p/try-writing-fe-with-rust-yew/</link><pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate><guid>https://edward40.com/p/try-writing-fe-with-rust-yew/</guid><description>&lt;img src="https://edward40.com/p/try-writing-fe-with-rust-yew/yew.jpg" alt="Featured image of post 尝试用 Rust + Yew 写高性能前端页面" />&lt;h1 id="前言">前言
&lt;/h1>&lt;p>看到这篇文章，可能很多人会有个疑问：“已经有 React + TypeScript 这么好的组合，为什么还想着使用 Rust 来写前端页面，不折腾吗？”
首先值得讨论的一点，接下来几年的前端方向有哪些？
个人的愚见，在全栈领域必然是 serverless，我在业务开发中已经尝到甜头，高效、简便、心智负担很低了；而在 Web 领域，由于 2019 年 12 月 5 日— 万维网联盟（W3C）宣布 WebAssembly 核心规范成为正式标准，WASM 势必它的影响力会逐步提升。
WASM 的框架 / 库的选择已经比较丰富了，如：C# + Blazor、Go + Vugu、Rust + Yew 等等。
可能有人会问，为什么不能使用 TypeScript / JavaScript 来编译到 WASM，归根结底是因为 WASM 要求语言必须是静态强类型。当然可以魔改 TypeScript / JavaScript 做到这一点，例如 AssemblyScript / TurboScript 就是如此在 TypeScript / JavaScript 上做静态规范的。与其如此魔改，我个人觉得倒不如大大方方的使用静态强类型语言来编译到 WASM，反正魔改后也无法共享原有的生态。
那么为什么选择 Rust 而不是其他的诸如 Go、C#、C / C++ 呢？这个确实没有很有说服力的理由，只是出于个人的技术偏好，或者说是受到 RY 使用 Rust 实现 Deno 的鼓舞吧。&lt;/p>
&lt;h1 id="准备">准备
&lt;/h1>&lt;h2 id="环境陈述">环境陈述
&lt;/h2>&lt;p>我使用的是 macOS，很多人自然会想到使用 homebrew 来完成 Rust 环境 setup。一开始我也是这么做的，不过会遇到下面问题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>error&lt;span style="color:#f92672">[&lt;/span>E0463&lt;span style="color:#f92672">]&lt;/span>: can&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>t find crate &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>std&lt;span style="color:#e6db74">`&lt;/span> | &lt;span style="color:#f92672">=&lt;/span> note: the &lt;span style="color:#e6db74">`&lt;/span>wasm32-unknown-unknown&lt;span style="color:#e6db74">`&lt;/span> target may not be installed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后还是走官方推荐的方式解决的。&lt;/p>
&lt;h2 id="rust-installation">Rust Installation
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>curl --proto &lt;span style="color:#e6db74">&amp;#39;=https&amp;#39;&lt;/span> --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="yew-installation">Yew Installation
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cargo install wasm-pack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cargo install cargo-web
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://user-images.githubusercontent.com/3114495/71768267-99f34400-2f4f-11ea-927f-9f919876c04f.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/3114495/71768269-9a8bda80-2f4f-11ea-8e2f-4fba76bfd7fd.png"
loading="lazy"
>&lt;/p>
&lt;h1 id="上手">上手
&lt;/h1>&lt;h2 id="一些说明">一些说明
&lt;/h2>&lt;p>Rust 本身就能实现编译到 WASM，使用 Yew 框架的原因就如其官网宣传：只是为了方便前端组件整合，以及对 JavaScript 互通性的考量。&lt;/p>
&lt;h2 id="项目初始化">项目初始化
&lt;/h2>&lt;p>这里不采用官网提供的参考，因为示例过于简单，有些脱离真正应用场景。下面的步骤是我个人认为比较接近真实开发的状态，相关源码我也放到 GitHub 供大家玩耍 ➡️https://github.com/SASUKE40/yew-starter&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone --depth&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> https://github.com/SASUKE40/yew-starter.git &amp;lt;project_name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="目录结构">目录结构
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Cargo.lock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Cargo.toml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── LICENSE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── README.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── index.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── index.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── package-lock.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── package.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── app.rs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── lib.rs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里面最重要的就是 &lt;code>Cargo.toml&lt;/code> 了，其中最关键的依赖如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">lib&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">crate-type&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;cdylib&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">dependencies&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">wasm-bindgen&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">yew&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.10.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>cdylib&lt;/code>  是用于配置构建 C interoperability(C FFI)，&lt;code>wasm-bindgen&lt;/code> 依赖是用于 WASM 模块和 JavaScript 之间的交互粘合。&lt;/p>
&lt;h2 id="加载-wasm-以及-bind-的过程">加载 WASM 以及 bind 的过程
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">mod&lt;/span> app;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> wasm_bindgen::prelude::&lt;span style="color:#f92672">*&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[wasm_bindgen]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">run_app&lt;/span>() -&amp;gt; Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>(), JsValue&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> yew::start_app::&lt;span style="color:#f92672">&amp;lt;&lt;/span>app::App&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在需要导出 Rust 函数到 JavaScript 中，只需要在函数方法上注释 &lt;code>#[wasm_bindgen]&lt;/code> 即可，接着在 js 文件中导入使用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">run_app&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./lib&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">run_app&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="构建套件">构建套件
&lt;/h2>&lt;p>使用 Parcel 是最方便的，开箱即用。既可以直接 import rs，也可以 import wasm。
&lt;img src="https://user-images.githubusercontent.com/3114495/71775834-453ce100-2fc2-11ea-8c66-27f19c0b8c98.png"
loading="lazy"
alt="image"
>
我这里用了 &lt;code>parcel-plugin-wasm.rs&lt;/code> 插件完成 Cargo loader 的工作，和上述 import rs 的方式不同：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">run_app&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./Cargo.toml&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">run_app&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="yew-组件编写体验">Yew 组件编写体验
&lt;/h2>&lt;p>Yew 框架使用 &lt;code>html!&lt;/code> macro 来生成 HTML&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Component &lt;span style="color:#66d9ef">for&lt;/span> App {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Msg;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Properties&lt;/span> &lt;span style="color:#f92672">=&lt;/span> ();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span>(_: &lt;span style="color:#a6e22e">Self&lt;/span>::Properties, _: &lt;span style="color:#a6e22e">ComponentLink&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>Self&lt;span style="color:#f92672">&amp;gt;&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">Self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> App {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, _msg: &lt;span style="color:#a6e22e">Self&lt;/span>::Message) -&amp;gt; &lt;span style="color:#a6e22e">ShouldRender&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">view&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#a6e22e">Html&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>Self&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> html! {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>p&lt;span style="color:#f92672">&amp;gt;&lt;/span>{ &lt;span style="color:#e6db74">&amp;#34;Hello world!&amp;#34;&lt;/span> }&lt;span style="color:#f92672">&amp;lt;/&lt;/span>p&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>模板中可以使用 &lt;code>html! { &amp;quot;Hello, World&amp;quot; }&lt;/code> 这样的方式包裹文本或变量，这和 jsx 比较类似。
事件绑定、条件、循环也都是类似的，大同小异：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 点击事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>html!{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>button onclick&lt;span style="color:#f92672">=|&lt;/span>_&lt;span style="color:#f92672">|&lt;/span> Msg::Click&lt;span style="color:#f92672">&amp;gt;&lt;/span>{ &lt;span style="color:#e6db74">&amp;#34;Click Me!&amp;#34;&lt;/span> }&lt;span style="color:#f92672">&amp;lt;/&lt;/span>button&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 条件渲染
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>html! {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>div&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> show_link {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> html! {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>a href&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://example.com&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;Link&amp;#34;&lt;/span>}&lt;span style="color:#f92672">&amp;lt;/&lt;/span>a&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> html! {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/&lt;/span>div&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 迭代渲染
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>html! {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>ul class&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item-list&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#66d9ef">for&lt;/span> self.props.items.iter().map(renderItem) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/&lt;/span>ul&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="效果">效果
&lt;/h1>&lt;p>Navigate to &lt;a class="link" href="https://yew-starter.netlify.com/" target="_blank" rel="noopener"
>https://yew-starter.netlify.com/&lt;/a>
&lt;img src="https://user-images.githubusercontent.com/3114495/71775897-ffcce380-2fc2-11ea-85f8-c3fbae3099e2.png"
loading="lazy"
alt="image"
>
实际上 WASM 没有大家相信的那么“便携小巧”，WASM 吃掉的体积有 50kb。&lt;/p>
&lt;h1 id="总结">总结
&lt;/h1>&lt;p>其优势：&lt;/p>
&lt;ul>
&lt;li>WebAssembly 在桌面客户端移植到 Web 不可或缺&lt;/li>
&lt;li>作为胶水包存在，如某面包姐姐最近就在尝试 Rust 2 WASM(CPP) 2 Node.js
其疑点：&lt;/li>
&lt;li>高性能，感觉没有很突出到必须得这么做&lt;/li>
&lt;li>可移植性，要做 Web 的 JVM？&lt;/li>
&lt;/ul>
&lt;p>WASM 的生态日趋丰富完善，未来 WASM 在前端必然会大放异彩。不过也无需夸大其地位，可以参考 &lt;a class="link" href="https://www.zhihu.com/question/322007706/answer/741764049" target="_blank" rel="noopener"
>WebAssembly 的出现是否会取代 JavaScript？&lt;/a>这个知乎回答。摘抄官方对其定位的&lt;a class="link" href="https://webassembly.org/docs/faq/" target="_blank" rel="noopener"
>一个回答&lt;/a>：WebAssembly 旨在作为 JavaScript 的补充而不是替代。
&lt;img src="https://user-images.githubusercontent.com/3114495/71776039-49b6c900-2fc5-11ea-9bab-23f88030bfa8.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>通宵写文，求 🌟🌟 求关注，不胜感激 ⬇️&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/SASUKE40/yew-starter" target="_blank" rel="noopener"
>https://github.com/SASUKE40/yew-starter&lt;/a>&lt;/p></description></item><item><title>尝试一下 VSCode Remote 开发 Node 应用</title><link>https://edward40.com/p/try-vscode-remote/</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><guid>https://edward40.com/p/try-vscode-remote/</guid><description>&lt;img src="https://edward40.com/p/try-vscode-remote/vscode.jpg" alt="Featured image of post 尝试一下 VSCode Remote 开发 Node 应用" />&lt;h2 id="第一步-安装-vscode-insiders">第一步 安装 VSCode Insiders
&lt;/h2>&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743917-54d5a517-841b-43ea-a993-df3f3b38f763.png#align=left&amp;amp;display=inline&amp;amp;height=559&amp;amp;originHeight=559&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="VSCode Insiders 官网"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://code.visualstudio.com/insiders/code.visualstudio.com" target="_blank" rel="noopener"
>https://code.visualstudio.com/insiders/code.visualstudio.com&lt;/a>&lt;/p>
&lt;p>目前只能在 VSCode Insiders 版本体验 Remote Development&lt;/p>
&lt;h2 id="第二步-安装-remote-development-插件">第二步 安装 Remote Development 插件
&lt;/h2>&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743932-53418a7d-b276-4d95-8633-661c4b392296.png#align=left&amp;amp;display=inline&amp;amp;height=558&amp;amp;originHeight=558&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="Remote Development 插件"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpackmarketplace.visualstudio.com" target="_blank" rel="noopener"
>https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpackmarketplace.visualstudio.com&lt;/a>&lt;/p>
&lt;h2 id="第三步-配置-ssh-config">第三步 配置 SSH Config
&lt;/h2>&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743885-aff00c17-7d47-4e5f-aa2c-0611357ee7b5.png#align=left&amp;amp;display=inline&amp;amp;height=558&amp;amp;originHeight=558&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="SSH 配置文件"
>&lt;/p>
&lt;p>SSH 配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Host ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HostName &amp;lt;your-remote-host&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User ubuntu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里需要准备一个远端的机器，这样可以直接访问到服务器的文件。&lt;/p>
&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743887-f9d7a7df-f9f5-4599-952a-7a658117c13d.png#align=left&amp;amp;display=inline&amp;amp;height=558&amp;amp;originHeight=558&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="远端文件管理"
>&lt;/p>
&lt;h2 id="第四步-编写-node-应用">第四步 编写 Node 应用
&lt;/h2>&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743913-8e957743-919c-4cde-8d25-1c936268274a.png#align=left&amp;amp;display=inline&amp;amp;height=558&amp;amp;originHeight=558&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="一个简单的 node 应用"
>&lt;/p>
&lt;p>基本就 4 个文件，已经放到 github 上：
&lt;a class="link" href="https://github.com/SASUKE40/docker_web_appgithub.com" target="_blank" rel="noopener"
>https://github.com/SASUKE40/docker_web_appgithub.com&lt;/a>&lt;/p>
&lt;h2 id="第五步-构建推送-docker-镜像">第五步 构建推送 docker 镜像
&lt;/h2>&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743894-a5a67fa5-9c6f-4714-9bff-11cc6a3f1228.png#align=left&amp;amp;display=inline&amp;amp;height=395&amp;amp;originHeight=395&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="Docker Hub"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://hub.docker.com/hub.docker.com" target="_blank" rel="noopener"
>https://hub.docker.com/hub.docker.com&lt;/a>&lt;/p>
&lt;p>在应用项目目录下执行镜像构建&lt;/p>
&lt;p>docker build -t edward40/node-web-app .&lt;/p>
&lt;p>查看构建的镜像&lt;/p>
&lt;p>docker images&lt;/p>
&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743906-f9d99e10-71b5-4d15-86a1-f57560ed8092.png#align=left&amp;amp;display=inline&amp;amp;height=486&amp;amp;originHeight=486&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="构建查看 Docker 镜像"
>&lt;/p>
&lt;p>本地试跑镜像&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker run -p 3000:8080 -d edward40/node-web-app
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>访问 &lt;a class="link" href="http://localhost:3000/" target="_blank" rel="noopener"
>http://localhost:3000&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743937-838f6346-89c3-48fb-ac35-3373fd56c6b3.png#align=left&amp;amp;display=inline&amp;amp;height=456&amp;amp;originHeight=456&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="本地查看效果"
>&lt;/p>
&lt;p>推送 Docker 镜像可以在终端执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>docker push edward40/docker_web_app:tagname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过这里我用官方的自动化构建&lt;/p>
&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743885-3f850c63-2cb3-41d9-81ca-1211546b3026.png#align=left&amp;amp;display=inline&amp;amp;height=456&amp;amp;originHeight=456&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="配置自动化构建镜像"
>&lt;/p>
&lt;p>只要推送代码就会 build 出镜像&lt;/p>
&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743912-cfe78e3f-c1be-4f98-83b0-e235daa56acf.png#align=left&amp;amp;display=inline&amp;amp;height=456&amp;amp;originHeight=456&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="自动化构建流程"
>&lt;/p>
&lt;h2 id="第六步-服务器上跑镜像">第六步 服务器上跑镜像
&lt;/h2>&lt;p>在 SSH 终端中拉取 Node 应用镜像&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo docker pull edward40/docker_web_app
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405744425-4a2520a6-6740-42f6-8d93-a4f4c42fd3c9.png#align=left&amp;amp;display=inline&amp;amp;height=558&amp;amp;originHeight=558&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="服务端拉取镜像"
>&lt;/p>
&lt;p>服务端启动 Container&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo docker run -p 80:8080 -d edward40/docker_web_app
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="第七步-本地开发-docker-container">第七步 本地开发 Docker Container
&lt;/h2>&lt;p>安装 Docker 插件&lt;/p>
&lt;p>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=PeterJausovec.vscode-dockermarketplace.visualstudio.com" target="_blank" rel="noopener"
>https://marketplace.visualstudio.com/items?itemName=PeterJausovec.vscode-dockermarketplace.visualstudio.com&lt;/a>&lt;/p>
&lt;p>项目目录创建配置文件&lt;/p>
&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743908-75e153f8-5f30-44ff-b834-03f1c1af31c9.png#align=left&amp;amp;display=inline&amp;amp;height=558&amp;amp;originHeight=558&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="创建 Container 配置文件"
>&lt;/p>
&lt;p>创建 Container 配置文件&lt;/p>
&lt;p>不过因为使用 Alipine 导致无法打开&lt;/p>
&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743920-7b386948-9bb9-4b72-962f-df34bd871658.png#align=left&amp;amp;display=inline&amp;amp;height=558&amp;amp;originHeight=558&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="12"
>&lt;/p>
&lt;p>需要切换别的 Linux 系统，并增加 .devcontainer.json 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Node.js Sample&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;dockerFile&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Dockerfile&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;appPort&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">3000&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;extensions&amp;#34;&lt;/span>: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dockerfile 的 alpine 换成 lts 版本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> node:lts&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Create app directory&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /usr/src/app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Install app dependencies&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># A wildcard is used to ensure both package.json AND package-lock.json are copied&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># where available (npm@5+)&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> package&lt;span style="color:#ae81ff">\*&lt;/span>.json ./&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> npm install&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># If you are building your code for production&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># RUN npm ci --only=production&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Bundle app source&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> . .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">EXPOSE&lt;/span>&lt;span style="color:#e6db74"> 8080&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [ &lt;span style="color:#e6db74">&amp;#34;npm&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;start&amp;#34;&lt;/span> ]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743946-1675fb65-b892-49ae-aca4-7fab222b3909.png#align=left&amp;amp;display=inline&amp;amp;height=558&amp;amp;originHeight=558&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="点击右下在容器中打开"
>&lt;/p>
&lt;p>点击右下在容器中打开&lt;/p>
&lt;p>打开 Shell&lt;/p>
&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743964-e306f894-05c6-4119-8c0f-e38f76faaf6d.png#align=left&amp;amp;display=inline&amp;amp;height=510&amp;amp;originHeight=510&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="最终可以在容器中方便用终端"
>&lt;/p>
&lt;p>最终可以在容器中方便用终端&lt;/p>
&lt;p>&lt;img src="https://cdn.nlark.com/yuque/0/2020/png/99653/1578405743934-6f5c8340-3a92-4f55-a40b-e503dbde9afd.png#align=left&amp;amp;display=inline&amp;amp;height=558&amp;amp;originHeight=558&amp;amp;originWidth=720&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=720"
loading="lazy"
alt="使用容器终端"
>&lt;/p>
&lt;p>使用容器终端&lt;/p>
&lt;h2 id="使用总结">使用总结
&lt;/h2>&lt;p>VSCode 的 Remote SSH 插件完美击中运维痛点，以后可以抛弃 Vim 直接在 VSCode 里面改东西，非常方便。
而 Remote Containers 插件就有点鸡肋，连到 Docker 容器中好像也没什么大的意义。个人更倾向代码提交触发 Docker Hub 的自动构建能力，并服务器上更新 Docker 镜像容器这样的工作流。如果有小伙伴发现这个插件更好的用法务必留言。
最后，VSCode Remote Development 快快 Release 吧！&lt;/p></description></item><item><title>试玩 deno2</title><link>https://edward40.com/p/try-deno2/</link><pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate><guid>https://edward40.com/p/try-deno2/</guid><description>&lt;img src="https://edward40.com/p/try-deno2/deno.png" alt="Featured image of post 试玩 deno2" />&lt;h1 id="前言">前言
&lt;/h1>&lt;p>ry 近期把 deno 的第二版原型从 deno2 文件夹中转移到 src 上了，并初步完成之前定下针对 unprivileged 部分的改造目标：&lt;/p>
&lt;ul>
&lt;li>Use the gn build system for fast builds, sane configuration, and easy linking into Chrome.&lt;/li>
&lt;li>Use V8 snapshots to improve startup time.&lt;/li>
&lt;li>Remove Golang. Although it has been working nicely, I am concerned the double GC will become a problem sometime down the road.&lt;/li>
&lt;li>Distribute a C++ library called libdeno, containing the snapshotted typescript runtime.&lt;/li>
&lt;li>Test the message passing and other functionality at that layer before involving higher level languages.
翻译：&lt;/li>
&lt;li>使用 &lt;a class="link" href="https://link.zhihu.com/?target=https%3A//chromium.googlesource.com/chromium/src/%2B/master/tools/gn/docs/quick_start.md" target="_blank" rel="noopener"
>GN&lt;/a> 这个构建工具，这是 chromium 团队使用的构建工具&lt;/li>
&lt;li>使用 V8 Snapshots 提升启动速度（已完成）&lt;/li>
&lt;li>**移除 Golang，**因为不想同时存在两个 GC（Go 和 TS）&lt;/li>
&lt;li>弄了一个 C++ 库叫 libdeno，负责 TS 的运行时环境&lt;/li>
&lt;/ul>
&lt;h1 id="试玩">试玩
&lt;/h1>&lt;h2 id="克隆-depot-tools">克隆 &lt;a class="link" href="http://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up" target="_blank" rel="noopener"
>Depot Tools&lt;/a>
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置环境变量">配置环境变量
&lt;/h2>&lt;p>这里我是把配置到 &lt;code>.zshrc&lt;/code> 文件中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export PATH&lt;span style="color:#f92672">=&lt;/span>$PATH:/path/to/depot_tools
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="克隆仓库">克隆仓库
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone git@github.com:ry/deno.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="进入到-src-文件夹">进入到 src 文件夹
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd deno/src
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="获取包和-v8">获取包和 v8
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gclient sync --no-history
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后你就会在 &lt;code>src&lt;/code> 下看到一堆三方包和 &lt;code>v8&lt;/code> 被下载下来&lt;/p>
&lt;p>&lt;img src="https://cdn.yuque.com/yuque/0/2018/png/99653/1529995554027-c933cf86-d4df-4399-a4e2-eb1a7a5a9e31.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="安装-js-依赖">安装 js 依赖
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gn gen out/Debug --args&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cc_wrapper=&amp;#34;ccache&amp;#34; is_debug=true &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-ninja-编译">使用 ninja 编译
&lt;/h2>&lt;p>mac 上得先安装 &lt;code>ccache&lt;/code> 不然会报 &lt;code>subcommand failed&lt;/code> 错误&lt;/p>
&lt;p>&lt;img src="https://cdn.yuque.com/yuque/0/2018/png/99653/1529995488649-004e99f7-50ff-4456-b394-15c20a1ec5ff.png"
loading="lazy"
>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install ccache
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>src&lt;/code> 下进行编译&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ninja -C out/Debug/ deno
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.yuque.com/yuque/0/2018/png/99653/1529995461197-704e52ca-67a1-4682-a8fd-7060b393d590.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="试着执行">试着执行
&lt;/h2>&lt;p>这样 deno 的执行文件就产生了&lt;/p>
&lt;p>&lt;img src="https://cdn.yuque.com/yuque/0/2018/png/99653/1529996003157-e93454bd-02ab-4daf-9cdb-f617221510c1.png"
loading="lazy"
>&lt;/p>
&lt;p>接着运行看看&lt;/p>
&lt;p>&lt;img src="https://cdn.yuque.com/yuque/0/2018/png/99653/1529996089799-7ddd86b3-9b2b-421d-abf1-e8044df6c462.png"
loading="lazy"
>&lt;/p>
&lt;p>打印出了 v8 的版本 V8 6.8.275.14&lt;/p></description></item><item><title>你可能不需要 Derived State</title><link>https://edward40.com/p/you-may-dont-need-drevied-state/</link><pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate><guid>https://edward40.com/p/you-may-dont-need-drevied-state/</guid><description>&lt;img src="https://edward40.com/p/you-may-dont-need-drevied-state/react-derived-state.jpg" alt="Featured image of post 你可能不需要 Derived State" />&lt;p>React 16.4 包含了一个  &lt;a class="link" href="https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/05/23/react-v-16-4.html%23bugfix-for-getderivedstatefromprops" target="_blank" rel="noopener"
>getDerivedStateFromProps 的 bugfix&lt;/a>，这个 bug 导致一些 React 组件潜在的 bug 稳定复现。这个版本暴露了个案例，当你的应用正在使用反模式构建，则将会在此次修复后可能无法工作，我们对这个改动感到抱歉。在本文中，我们将阐述一些通常的使用 Derived State 的反模式以及相应的解决替代方案。&lt;/p>
&lt;p>在很长一段时间，在 props 改变时响应 state 的更新，无需额外的渲染，唯一的途径就是  &lt;code>componentWillReceiveProps&lt;/code>  这个生命周期方法。在 16.3 版本下，&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/03/29/react-v-16-3.html%23component-lifecycle-changes" target="_blank" rel="noopener"
>我们介绍了一个替代的生命周期 getDerivedStateFromProps&lt;/a>  更加安全的方式来解决相同的用例。同时，我们意识到人们有很多关于使用这两个方法的错误解读，我们发现了这些反模式导致一些微妙且令人困惑的 bug。 &lt;code>getDerivedStateFromProps&lt;/code>  在 16.4 中做了修复，&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//github.com/facebook/react/issues/12898" target="_blank" rel="noopener"
>使得 derived state 更加可预测&lt;/a>，因此滥用的后果更加容易被留意到。
Note 
所有关于旧的  &amp;gt; &lt;code>componentWillReceiveProps&lt;/code>  和新  &amp;gt; &lt;code>getDerivedStateFromProps&lt;/code>  的反模式都会在本文中阐述。
这篇文章涵盖以下话题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>什么时候使用 derived state&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 derived state 时通常的 bug&lt;/p>
&lt;ul>
&lt;li>
&lt;p>反模式：无条件地将 prop 复制给 state&lt;/p>
&lt;/li>
&lt;li>
&lt;p>反模式：当 props 改变时清除 state&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>推荐的方案&lt;/p>
&lt;/li>
&lt;li>
&lt;p>什么是 memoization ？&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="什么时候使用-derived-state">什么时候使用 Derived State
&lt;/h1>&lt;p>&lt;code>getDerivedStateFromProps&lt;/code>  存在只为了一个目的。它让组件在  &lt;strong>props 发生改变&lt;/strong>时更新它自身的内部 state。我们之前的文章提供一些例子，例如：&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/03/27/update-on-async-rendering.html%23updating-state-based-on-props" target="_blank" rel="noopener"
>基于 offset prop 的改变记录当前滚动位置&lt;/a>或者  &lt;a class="link" href="https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/03/27/update-on-async-rendering.html%23fetching-external-data-when-props-change" target="_blank" rel="noopener"
>通过源 prop 加载外部数据&lt;/a>。&lt;/p>
&lt;p>我们没有提供更多的例子，因为这有一个常规的准则，&lt;strong>应该保守地使用 derived state&lt;/strong>。所有我们看到关于 derived state 的问题从根本上可以归结成两类：(1) 无条件的以 props 更新 state 或者 (2) 每当 props 和 state 不同时就更新 state。(我们将在下面谈到更多细节。)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当你使用 derived state 来暂存一些仅基于当前 props 的计算结果时，你不需要 derived state。查看  &lt;a class="link" href="https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html%23what-about-memoization" target="_blank" rel="noopener"
>什么是 memoization ?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当你无条件更新 derived state 抑或是每当 props 与 state 不同时更新 state，你的组件可能会频繁重置它的 state。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="使用-derived-state-时的常见-bug">使用 Derived State 时的常见 bug
&lt;/h1>&lt;p>“受控的” 和 “不受控的” 这两个术语经常涉及到 form 的 input，然而他们也能描述组件数据存在的位置。当数据作为 props 传递时，则数据可以被认为是&lt;strong>受控的&lt;/strong>(因为父组件&lt;em>控制&lt;/em>了这些数据)。仅存在于内部 state 的数据可以被认为是&lt;strong>不受控&lt;/strong>的(因为父组件不能直接改变它)。&lt;/p>
&lt;p>derived state 的最常见错误就是混合了“受控”和“不受控”两种情况；当一个 derived state 值也使用  &lt;code>setState&lt;/code>  来更新时，那它数据来源就不是唯一的。上文提到的“&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/03/27/update-on-async-rendering.html%23fetching-external-data-when-props-change" target="_blank" rel="noopener"
>外部数据加载的例子&lt;/a>”看上去好像就是这样，但其实有本质上差别。在数据加载例子中，&amp;lsquo;source&amp;rsquo; prop 和 &amp;rsquo;loading&amp;rsquo; state 都有明确的数据来源。当 &amp;lsquo;source&amp;rsquo; prop &lt;strong>改变&lt;/strong>时， &amp;rsquo;loading&amp;rsquo; state &lt;strong>总会&lt;/strong>被覆盖。相反地，state 当且仅当 prop 改变时才会被覆盖，否则只能被 state 所在的组件所管理。&lt;/p>
&lt;p>当这些约束被改变时问题就浮现了。这会产生两个经典形式。让我们看一看他们。&lt;/p>
&lt;h2 id="反模式无条件地将-prop-复制给-state">反模式：无条件地将 prop 复制给 state
&lt;/h2>&lt;p>一个常见关于  &lt;code>getDerivedStateFromProps&lt;/code>  和  &lt;code>componentWillReceiveProps&lt;/code>  的错误理解就是他们只会在 props “变化”时调用。无论是组件重新渲染还是 props 和之前“不同”，这些生命周期方法都会被调用。基于此，这两个生命周期方法总是被用于不安全地无条件地覆盖 state。&lt;strong>这样做将导致 state 的更新发生丢失。&lt;/strong>&lt;/p>
&lt;p>让我们思考一个例子来说明这个问题。这里有一个  &lt;code>EmailInput&lt;/code>  组件“映射”了一个 email 属性在 state 中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EmailInput&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">email&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleChange&lt;/span>} &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">email&lt;/span>} &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handleChange&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({ &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">componentWillReceiveProps&lt;/span>(&lt;span style="color:#a6e22e">nextProps&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// This will erase any local state updates!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Do not do this.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({ &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">nextProps&lt;/span>.&lt;span style="color:#a6e22e">email&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先，这个组件看上去没什么问题。State 被 props 传递进来的值所初始化，并在我们键入  &lt;code>&amp;lt;input&amp;gt;&lt;/code>  的时候被更新。但是如果我们的父组件重新渲染的时候，我们输入到  &lt;code>input&lt;/code>  的内容就会丢失(&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//codesandbox.io/s/m3w9zn1z8x" target="_blank" rel="noopener"
>看这个例子&lt;/a>)！即使我们在重置前进行比较  &lt;code>nextProps.email !== this.state.email&lt;/code>也会这样。&lt;/p>
&lt;p>在这个简单的例子中，只有当 email 属性被改变时加入  &lt;code>shouldComponentUpdate&lt;/code>  来解决重渲染。然而在实践中，组件总是接受多个 props；另一个 prop 改变时依然会导致重渲染和不当重置。在函数和对象属性在内部被创建，在一个实质性的变化发生时，实现  &lt;code>shouldComponentUpdate&lt;/code>  可靠地只返回 true 值变得困难。&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//codesandbox.io/s/jl0w6r9w59" target="_blank" rel="noopener"
>这里有个 demo 展示发生的情况&lt;/a>。因此， &lt;code>shouldComponentUpdate&lt;/code>  作为性能优化的最好方式被使用，而不用在 derived state 中保证正确性。&lt;/p>
&lt;p>至此，为何&lt;strong>无条件地将 props 复制给 state 是一个坏想法&lt;/strong>显而易见。在 review 可能的解决方案，让我们来看看一个有关的问题模式：在 email 属性改变时，如果我们只更新 state ？&lt;/p>
&lt;h2 id="反模式当-props-改变时清除-state">反模式：当 props 改变时清除 state
&lt;/h2>&lt;p>继续上述的例子，当  &lt;code>props.email&lt;/code>  改变时，我们可以通过只更新来避免意外地清除 state：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EmailInput&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">email&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">componentWillReceiveProps&lt;/span>(&lt;span style="color:#a6e22e">nextProps&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Any time props.email changes, update state.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">nextProps&lt;/span>.&lt;span style="color:#a6e22e">email&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">email&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">nextProps&lt;/span>.&lt;span style="color:#a6e22e">email&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note
不仅在以上例子中  &amp;gt; &lt;code>componentWillReceiveProps&lt;/code> ,一个的反模式也被用于  &amp;gt; &lt;code>getDerivedStateFromProps&lt;/code>  中。
我们做了很大的改进。现在我们的组件在 props 实质变化时才会清楚我们输入的内容。&lt;/p>
&lt;p>但依旧存在一个微妙的问题。想象一下一个密码管理应用使用上述输入组件。当在两个相同 email 的账户下切换时，输入组件重置会失败。这是因为两个账户传递给组件的 prop 值是相同的！这使得用户感到诧异，一个账户没有保存的变更会影响另一个共享同一 email 的账号上。(&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//codesandbox.io/s/mz2lnkjkrx" target="_blank" rel="noopener"
>这里看 demo&lt;/a>)&lt;/p>
&lt;p>这种设计是有本质缺陷的，但它是最容易犯的。(&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//twitter.com/brian_d_vaughn/status/959600888242307072" target="_blank" rel="noopener"
>我就犯过！&lt;/a>)幸运的是，以下有两个更好的替代方案。而关键就是对每一片数据，你需要选一个控制数据并以其作为真实源的简单组件，并避免副本数据存在于其他组件。让我们来看一下这些替代方案。&lt;/p>
&lt;hr>
&lt;h1 id="优选方案">优选方案
&lt;/h1>&lt;h2 id="推荐完全受控组件">推荐：完全受控组件
&lt;/h2>&lt;p>一个避免上述涉及问题的途径就是完全地移除我们组件中的 state。如果 email 地址只存在于 prop，那我们没必要担心 state 的冲突。我们甚至可以把  &lt;code>EmailInput&lt;/code>  缓存一个更加轻量的函数式的组件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">EmailInput&lt;/span>(&lt;span style="color:#a6e22e">props&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">onChange&lt;/span>} &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">email&lt;/span>} &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个途径简化了我们组件的实现，但是我们如果想存储草稿的时候，父组件还是需要手工完成这件事。(&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//codesandbox.io/s/7154w1l551" target="_blank" rel="noopener"
>点这看这种模式的例子&lt;/a>)&lt;/p>
&lt;h2 id="推荐带有-key-的完全不受控组件">推荐：带有 key 的完全不受控组件
&lt;/h2>&lt;p>另一个替代方案就是我们的组件完全的控制自己的 email state “草稿”。在此例子中，我们的组件依然可以接收一个来自于&lt;em>初始值&lt;/em>，但它将会忽略后面 prop 的改动：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EmailInput&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">defaultEmail&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handleChange&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({ &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleChange&lt;/span>} &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">email&lt;/span>} &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了能在不同的情境下重置值(如密码管理方案)，我们使用特殊的 React 属性  &lt;code>key&lt;/code> 。当  &lt;code>key&lt;/code>  改变时，React &lt;a class="link" href="https://link.zhihu.com/?target=https%3A//reactjs.org/docs/reconciliation.html%23keys" target="_blank" rel="noopener"
>将创建一个新的组件实例而不是更新现有的这个&lt;/a>。Keys 经常被用于动态 list，但在这里依然管用。在我们的案例中，我们能根据 user ID 在新用户被选中时重新创建 email 输入组件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">EmailInput&lt;/span> &lt;span style="color:#a6e22e">defaultEmail&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">email&lt;/span>} &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>} &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每当 ID 改变时， &lt;code>EmailInput&lt;/code>  将会被重新创建，它的 state 将会用最新的  &lt;code>defaultEmail&lt;/code>  值重置。(&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//codesandbox.io/s/6v1znlxyxn" target="_blank" rel="noopener"
>点这里看这种模式的例子&lt;/a>)使用这种途径，你不需要为每一个输入组件加  &lt;code>key&lt;/code> 。也许在 from 中加一个  &lt;code>key&lt;/code>  会来得更好。每当 key 改变时，所有在 from 里的组件都会用一个新的 initialized state 来重新创建。&lt;/p>
&lt;p>更多的案例中，这是一个处理需要被重置的 state 的最佳方式。
Note
虽然这貌似会很慢，在性能差异无关紧要的时候。当组件有很重的更新逻辑时候，使用一个 key ，忽略子树 diffing 甚至会更快。&lt;/p>
&lt;h2 id="替代方案-1使用-id-prop-重置不受控组件">替代方案 1：使用 ID prop 重置不受控组件
&lt;/h2>&lt;p>如果  &lt;code>key&lt;/code>  由于某些原因不能被使用(也许组件有昂贵的初始化代价)，一个可行但笨重的方案就是在  &lt;code>getDerivedStateFromProps&lt;/code>  中监听 “userID” 的改变：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EmailInput&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">defaultEmail&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">prevPropsUserID&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">userID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">getDerivedStateFromProps&lt;/span>(&lt;span style="color:#a6e22e">props&lt;/span>, &lt;span style="color:#a6e22e">state&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Any time the current user changes,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Reset any parts of state that are tied to that user.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// In this simple example, that&amp;#39;s just the email.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">userID&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">prevPropsUserID&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">prevPropsUserID&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">userID&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">defaultEmail&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这也提供了灵活性——重置部分被我们选中的组件内部 state。(&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//codesandbox.io/s/rjyvp7l3rq" target="_blank" rel="noopener"
>点这里看此模式的 demo&lt;/a>)
Note
及时以上例子展示了  &amp;gt; &lt;code>getDerivedStateFromProps&lt;/code> ，同样的技术手段也可以被用在  &amp;gt; &lt;code>componentWillReceiveProps&lt;/code> 。&lt;/p>
&lt;h2 id="替代方式-2在一个实例方法中重置不受控组件">替代方式 2：在一个实例方法中重置不受控组件
&lt;/h2>&lt;p>更罕见地，你可能需要重置 state 即使没有适当的 ID 可用为  &lt;code>key&lt;/code> 。一个解决方案就是每次你想重置时用一个随机数或者自增数字重置 key。另一个可行的方案是暴露一个实例方法命令式的重置内部 state：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EmailInput&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">defaultEmail&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resetEmailForNewUser&lt;/span>(&lt;span style="color:#a6e22e">newEmail&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({ &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">newEmail&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>父组件能&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//reactjs.org/docs/glossary.html%23refs" target="_blank" rel="noopener"
>用 ref 来调用这个方法&lt;/a>。(&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//codesandbox.io/s/l70krvpykl" target="_blank" rel="noopener"
>点击这看这个模式例子&lt;/a>)&lt;/p>
&lt;p>Refs 在这个确定的例子中是有用的，但通常上我们建议你保守使用。甚至在这个 demo 中，这个必要的方法是不理想的，因为本来一次的渲染会变成两次。&lt;/p>
&lt;hr>
&lt;h1 id="扼要重述">扼要重述
&lt;/h1>&lt;p>重述一下，当设计一个组件的时候，决定数据是否受控或不受控是至关重要的。&lt;/p>
&lt;p>让组件变得&lt;strong>受控&lt;/strong>，而不是试图在** state 中复制一个 prop **，在一些父组件的 state 中联合两个分散的值。举个例子，与其子组件接收一个“已提交的” &lt;code>props.value&lt;/code>  并跟踪一个“草稿” &lt;code>state.value&lt;/code> ，不如在父组件中管理  &lt;code>state.draftValue&lt;/code>  和  &lt;code>state.committedValue&lt;/code> ，并控制直接控制子组件的值。这让数据流更加明确和可预测。&lt;/p>
&lt;p>对&lt;strong>不受控&lt;/strong>组件，如果你在一个特殊的 prop (通常是 ID)改变时试图重置 state，你有一些选择：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>推荐：重置所有内部 state，使用 key 属性&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>替代方案 1：&lt;em>仅重置确定的 state 字段&lt;/em>，监听特定属性的变化(例如： &lt;code>props.userID&lt;/code>)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>替代方案 2：你也可以考虑使用 refs 调用一个命令式实例方法。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="什么是-memoization-">什么是 memoization ?
&lt;/h1>&lt;p>我们也看到，仅当输入变化的时候，derived state 被用于确保关键值被用于  &lt;code>render&lt;/code>  中会重新计算。这个技巧被称之为  &lt;a class="link" href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Memoization" target="_blank" rel="noopener"
>memoization&lt;/a>。&lt;/p>
&lt;p>使用 derived state 来完成 memoization 并不一定是坏事，但这经常不是最佳方案。管理 derived state 具有内在复杂度，这个复杂度随着属性的增加而提升。例如，如果我们想要加入第二个 derived feild 到我们的组件 state，那么我们的实现将需要分别跟踪两者的变化。&lt;/p>
&lt;p>让我们来看一个例子——组件携带一个属性(一个 item list)，并渲染匹配用户输入的搜索查询的 item。我们使用 derived state 存储过滤的 list：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Example&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filterText&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// *******************************************************
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// NOTE: this example is NOT the recommended approach.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// See the examples below for our recommendations instead.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// *******************************************************
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">getDerivedStateFromProps&lt;/span>(&lt;span style="color:#a6e22e">props&lt;/span>, &lt;span style="color:#a6e22e">state&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Re-run the filter whenever the list array or filter text change.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Note we need to store prevPropsList and prevFilterText to detect changes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">prevPropsList&lt;/span> &lt;span style="color:#f92672">||&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">prevFilterText&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">filterText&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">prevPropsList&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">prevFilterText&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">filterText&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filteredList&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>.&lt;span style="color:#a6e22e">includes&lt;/span>(&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">filterText&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handleChange&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({ &lt;span style="color:#a6e22e">filterText&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">Fragment&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleChange&lt;/span>} &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">filterText&lt;/span>} &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">ul&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">filteredList&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> =&amp;gt; (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">li&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>}&lt;span style="color:#f92672">&amp;gt;&lt;/span>{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>}&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/li&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/ul&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/Fragment&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个实现避免了不必要  &lt;code>filteredList&lt;/code>  的重新计算。但这比原来的更复杂，因为他必须分开跟踪和检测 props 和 state 的变化，才能正确更新过滤后的列表。在这个例子中，我们能使用  &lt;code>PureComponent&lt;/code>  简化工作，移动更新操作到 render 方法中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// PureComponents only rerender if at least one state or prop value changes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Change is determined by doing a shallow comparison of state and prop keys.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Example&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">PureComponent&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// State only needs to hold the current filter text value:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filterText&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handleChange&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({ &lt;span style="color:#a6e22e">filterText&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The render method on this PureComponent is called only if
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// props.list or state.filterText has changed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">filteredList&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>.&lt;span style="color:#a6e22e">includes&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">filterText&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">Fragment&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleChange&lt;/span>} &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">filterText&lt;/span>} &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">ul&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">filteredList&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> =&amp;gt; (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">li&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>}&lt;span style="color:#f92672">&amp;gt;&lt;/span>{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>}&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/li&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/ul&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/Fragment&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种途径比用 derived state 更加清晰且简单。偶尔地，这不够好——在大列表中过滤会变得慢，如果其他 prop 变化时  &lt;code>PureComponent&lt;/code>  不会阻止重渲染。为了解决这些问题，我们可以加入一个 memoization helper 来避免对 list 的不必要过滤：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">memoize&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;memoize-one&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Example&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// State only needs to hold the current filter text value:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">filterText&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Re-run the filter whenever the list array or filter text changes:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">filter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">memoize&lt;/span>((&lt;span style="color:#a6e22e">list&lt;/span>, &lt;span style="color:#a6e22e">filterText&lt;/span>) =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">list&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>.&lt;span style="color:#a6e22e">includes&lt;/span>(&lt;span style="color:#a6e22e">filterText&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handleChange&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({ &lt;span style="color:#a6e22e">filterText&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Calculate the latest filtered list. If these arguments haven&amp;#39;t changed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// since the last render, `memoize-one` will reuse the last return value.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">filteredList&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span>, &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">filterText&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">Fragment&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleChange&lt;/span>} &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">filterText&lt;/span>} &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">ul&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">filteredList&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> =&amp;gt; (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">li&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>}&lt;span style="color:#f92672">&amp;gt;&lt;/span>{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>}&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/li&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/ul&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/Fragment&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这更加简单，而且性能和 derived state 版本的一样好！&lt;/p>
&lt;p>当使用 memoization 时，记住一些约束条件：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在大多数案例中，你会想把 memoized 函数附加到组件实例上。这防止一个组件的多个实例重置彼此的 memoized key。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通常地，你会想使用一个具有缓存大小限制的 memoization helper 来避免内存泄露问题。（在以上的例子中，我们用了  &lt;code>memoize-one&lt;/code>  因为它仅缓存最近的参数和结果。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果  &lt;code>props.list&lt;/code>  在每次父组件渲染时被重新创建，本节中展示的实现手段是无法工作的。但在多数案例中，这种设置是适当的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h1 id="结语">结语
&lt;/h1>&lt;p>在实际的应用中，组件经常包含受控和不受控行为的混合。这是没问题的！如果每一个值都有清晰的真实源，你可以避免上面提及的反模式。&lt;/p>
&lt;p>同样值得重申的是， &lt;code>getDerivedStateFromProps&lt;/code> (一般的 derived state) 是一个高级特性，由于其复杂度，应该保守的使用它。如果你使用的案例超出这些模式，请在  &lt;a class="link" href="https://link.zhihu.com/?target=https%3A//github.com/reactjs/reactjs.org/issues/new" target="_blank" rel="noopener"
>Github&lt;/a>  或  &lt;a class="link" href="https://link.zhihu.com/?target=https%3A//twitter.com/reactjs" target="_blank" rel="noopener"
>Twitter&lt;/a>  上与我们分享！&lt;/p>
&lt;p>原文链接：&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html" target="_blank" rel="noopener"
>You Probably Don&amp;rsquo;t Need Derived State - React Blog&lt;/a>&lt;/p></description></item><item><title>React 官網示例講解</title><link>https://edward40.com/p/react-official-sample-explanation/</link><pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate><guid>https://edward40.com/p/react-official-sample-explanation/</guid><description>&lt;img src="https://edward40.com/p/react-official-sample-explanation/react.png" alt="Featured image of post React 官網示例講解" />&lt;h1 id="前言">前言
&lt;/h1>&lt;p>可能大家會問：“官網示例那麼簡單，有必要講解嗎？”，我的看法是：“非常需要！”。一般而言，官方文檔是學習新知識最好的去處，你可以瞭解它的理念、思想、模式和 API 等等，可謂是無所不包。相對來說，官網的 Sample 就是能快速的瞭解和切入的直觀體現。因此，今天來看看官網的示例要告訴我們什麼，相信它對感興趣 React 但是不是很瞭解的人可以有個感性的瞭解。&lt;/p>
&lt;h1 id="什麼是-react個人見解官方簡介轉述">什麼是 React（個人見解/官方簡介轉述）
&lt;/h1>&lt;ol>
&lt;li>它只做 UI 層面的事，你可以理解為是 Web Component 的特殊實現&lt;/li>
&lt;li>Virtual DOM，就一個字：“快”，同時支持服務端渲染&lt;/li>
&lt;li>數據流，單向的數據綁定足夠應付大部分的業務場景，同時使得數據和事件的流動變得清晰&lt;/li>
&lt;/ol>
&lt;h1 id="怎麼開始用上-react">怎麼開始用上 React
&lt;/h1>&lt;p>這裡我們先不用 Webpack、gulp 這些這麼“高級”的工具，方便小白入門。
我們直接引入對應的腳本更加方便，大概是這樣子的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;React Sample 1&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;container&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/babel-core/5.8.34/browser.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/react/0.14.7/react-with-addons.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/react/0.14.7/react-dom.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/babel&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">mountNode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;container&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">HelloMessage&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">createClass&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">div&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">Hello&lt;/span> {&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>}&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/div&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ReactDOM&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>(&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">HelloMessage&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;SASUKE40&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>, &lt;span style="color:#a6e22e">mountNode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>這是官網的第一個示例，當然官網略去了很多東西沒說。
先說一下上面代碼我加了的東西：&lt;/p>
&lt;ol>
&lt;li>&lt;code>browser.js&lt;/code> 是 &lt;code>babel&lt;/code> 的瀏覽器版本，&lt;code>babel&lt;/code> 是一個很酷的東西，自己 Google 下就知道有多酷。提示一下，千萬別急著用 babel6，你會用哭的~&lt;/li>
&lt;li>&lt;code>react&lt;/code> 就不必多說了，我們的主角&lt;/li>
&lt;li>&lt;code>react-dom&lt;/code> 是最近從 &lt;code>react&lt;/code> 拆出來的，以前是包在 &lt;code>react&lt;/code> 中的&lt;/li>
&lt;/ol>
&lt;p>細心的朋友可能看到 &lt;code>type=&amp;quot;text/babel&amp;quot;&lt;/code> 這個奇怪的類型屬性，其實它是為了讓 &lt;code>babel&lt;/code> 能去轉換 &lt;code>jsx&lt;/code> 成瀏覽器讀得懂兼容較好的 &lt;code>JavaScript&lt;/code>&lt;/p>
&lt;h1 id="示例初步講解">示例初步講解
&lt;/h1>&lt;p>為什麼說初步呢？因為深挖底層具體的動作，可能很多人都會暈，所以只講表層我們看的到的東西。&lt;/p>
&lt;p>第一個官方示例主要分成兩個步驟：&lt;/p>
&lt;ol>
&lt;li>創建 React 類，使用 &lt;code>React.createClass&lt;/code> 創建，傳入一個 object，
這個 object 有個成員屬性 render 返回 &lt;code>jsx&lt;/code>&lt;/li>
&lt;li>用 ReactDOM 如渲染並掛載到某個具體的 DOM 節點上&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>額外的 Tip：在這裡的 &lt;code>&amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;&lt;/code> 這一部分並不是 HTML，而是貨真價實的 JavaScript，並且創建出來對象是 React 實例，並不是 HTML 的 DOM 節點。&lt;/p>&lt;/blockquote>
&lt;h1 id="使用-react-在這個示例的好處">使用 React 在這個示例的好處
&lt;/h1>&lt;p>可以自定義標籤屬性，在渲染的時候可以插入到內容中&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;React Sample 2&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;container&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/babel-core/5.8.34/browser.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/react/0.14.7/react-with-addons.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/react/0.14.7/react-dom.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/babel&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">mountNode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;container&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">Timer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">createClass&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">getInitialState&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { &lt;span style="color:#a6e22e">secondsElapsed&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tick&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({ &lt;span style="color:#a6e22e">secondsElapsed&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">secondsElapsed&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">componentDidMount&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">interval&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">setInterval&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">tick&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">componentWillUnmount&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">clearInterval&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">interval&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">div&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">過去了&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">secondsElapsed&lt;/span>}&lt;span style="color:#a6e22e">秒&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/div&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ReactDOM&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>(&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">Timer&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>, &lt;span style="color:#a6e22e">mountNode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>這個示例多了好多：&lt;/p>
&lt;ol>
&lt;li>&lt;code>getInitialState&lt;/code> 是一個關鍵的成員屬性，它可以初始化 state，在 render 中可以調用 &lt;code>this.state.xxx&lt;/code> 就能拿到&lt;/li>
&lt;li>&lt;code>tick&lt;/code> 是一個自定義的成員屬性，其中 &lt;code>this.setState&lt;/code> 是 React 類的關鍵方法，可以修改 state 的值&lt;/li>
&lt;li>&lt;code>componentDidMount&lt;/code> 顧名思義，在掛載後執行一些東西，這裡是弄了個定時器&lt;/li>
&lt;li>&lt;code>componentWillUnmount&lt;/code> 也顧名思義，將要卸載的時候做點事情，良好的編碼習慣，這裡清除定時&lt;/li>
&lt;/ol>
&lt;h1 id="示例-3">示例 3
&lt;/h1>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;React Sample 3&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;container&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/babel-core/5.8.34/browser.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/react/0.14.7/react-with-addons.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/react/0.14.7/react-dom.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/babel&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">mountNode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;container&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">TodoList&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">createClass&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">createItem&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">li&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>}&lt;span style="color:#f92672">&amp;gt;&lt;/span>{&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>}&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/li&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">ul&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">items&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>(&lt;span style="color:#a6e22e">createItem&lt;/span>)}&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/ul&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">TodoApp&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">createClass&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">getInitialState&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { &lt;span style="color:#a6e22e">items&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [], &lt;span style="color:#a6e22e">text&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({ &lt;span style="color:#a6e22e">text&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handleSubmit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">preventDefault&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">nextItems&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">items&lt;/span>.&lt;span style="color:#a6e22e">concat&lt;/span>([
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">text&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>, &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> Date.&lt;span style="color:#a6e22e">now&lt;/span>() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">nextText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({ &lt;span style="color:#a6e22e">items&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">nextItems&lt;/span>, &lt;span style="color:#a6e22e">text&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">nextText&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">div&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">h3&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">TODO&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/h3&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">TodoList&lt;/span> &lt;span style="color:#a6e22e">items&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">items&lt;/span>} &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">form&lt;/span> &lt;span style="color:#a6e22e">onSubmit&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleSubmit&lt;/span>}&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">onChange&lt;/span>} &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>} &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">button&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>{&lt;span style="color:#e6db74">&amp;#39;Add #&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">items&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)}&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/button&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/form&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/div&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ReactDOM&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>(&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">TodoApp&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>, &lt;span style="color:#a6e22e">mountNode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>關鍵點：&lt;/p>
&lt;ol>
&lt;li>標籤可以嵌套&lt;/li>
&lt;li>可以些一些事件，以自定義事件函數體現，不管這裡的是 JavaScript 的事件，並不是 DOM 節點上定義的&lt;/li>
&lt;li>列表組件定義的一種推薦寫法：&lt;code>this.props.items.map&lt;/code> 傳入單個組件&lt;/li>
&lt;/ol>
&lt;h1 id="示例-4">示例 4
&lt;/h1>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;React Sample 4&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;container&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/babel-core/5.8.34/browser.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/react/0.14.7/react-with-addons.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/react/0.14.7/react-dom.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://cdn.bootcss.com/marked/0.3.5/marked.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/babel&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">mountNode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;container&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">MarkdownEditor&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">createClass&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">getInitialState&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Type some *markdown* here!&amp;#39;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handleChange&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setState&lt;/span>({ &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">refs&lt;/span>.&lt;span style="color:#a6e22e">textarea&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rawMarkup&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { &lt;span style="color:#a6e22e">__html&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">marked&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>, { &lt;span style="color:#a6e22e">sanitize&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> }) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">div&lt;/span> &lt;span style="color:#a6e22e">className&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MarkdownEditor&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">h3&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">Input&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/h3&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">textarea&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">onChange&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleChange&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ref&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;textarea&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">defaultValue&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">h3&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">Output&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/h3&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">div&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">className&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dangerouslySetInnerHTML&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">rawMarkup&lt;/span>()}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/div&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ReactDOM&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>(&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">MarkdownEditor&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>, &lt;span style="color:#a6e22e">mountNode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>關鍵點：&lt;/p>
&lt;ol>
&lt;li>可以使用自定義函數用作過濾器，如這裡引入的 &lt;code>marked.js&lt;/code> 裏的 &lt;code>marked()&lt;/code>&lt;/li>
&lt;li>React 中的設置 HTML 的 &lt;code>APIdangerouslySetInnerHTML，返回含有&lt;/code> &lt;code>__html&lt;/code> 屬性的 object 即可&lt;/li>
&lt;li>使用 &lt;code>refs&lt;/code> 拿到 DOM？思考一下是不是吧~&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>額外的 Tip：React 還沒有 1.0.0，很多都經常變化，&lt;code>refs&lt;/code> 在以前不是這麼拿到，哭死我們這些前端小白了~&lt;/p>&lt;/blockquote>
&lt;h1 id="結語">結語
&lt;/h1>&lt;p>前端之路還很長，React 大法好啊~&lt;/p></description></item></channel></rss>